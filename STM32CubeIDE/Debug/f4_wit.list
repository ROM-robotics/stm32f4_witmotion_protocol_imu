
f4_wit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005938  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b0  080061b0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061b8  080061b8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080061c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000588  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  200005f4  200005f4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000112ef  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d9a  00000000  00000000  000313ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001138  00000000  00000000  00034168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d4f  00000000  00000000  000352a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f10  00000000  00000000  00035fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015c30  00000000  00000000  00059eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4a76  00000000  00000000  0006fb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ed0  00000000  00000000  001445a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00149478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ab0 	.word	0x08005ab0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005ab0 	.word	0x08005ab0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <SysTick_Init>:
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
	fac_us=SystemCoreClock/8000000;
	fac_ms=(uint16_t)fac_us*1000;
}*/
void SysTick_Init(void) 
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
    // Configure SysTick to interrupt every 1ms
    SysTick->LOAD = (SystemCoreClock / 1000) - 1;  // Set reload register for 1ms ticks
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <SysTick_Init+0x2c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <SysTick_Init+0x30>)
 8000576:	fba2 2303 	umull	r2, r3, r2, r3
 800057a:	099b      	lsrs	r3, r3, #6
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <SysTick_Init+0x34>)
 800057e:	3b01      	subs	r3, #1
 8000580:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                              // Reset current SysTick counter value
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <SysTick_Init+0x34>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |   // Use processor clock
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <SysTick_Init+0x34>)
 800058a:	2207      	movs	r2, #7
 800058c:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk |     // Enable SysTick interrupt
                    SysTick_CTRL_ENABLE_Msk;       // Enable SysTick
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	20000004 	.word	0x20000004
 800059c:	10624dd3 	.word	0x10624dd3
 80005a0:	e000e010 	.word	0xe000e010

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_GPIO_Init+0x68>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a16      	ldr	r2, [pc, #88]	; (800060c <MX_GPIO_Init+0x68>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_GPIO_Init+0x68>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_GPIO_Init+0x68>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a0f      	ldr	r2, [pc, #60]	; (800060c <MX_GPIO_Init+0x68>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_GPIO_Init+0x68>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_GPIO_Init+0x68>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <MX_GPIO_Init+0x68>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_GPIO_Init+0x68>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800

08000610 <delay_ms>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
volatile uint32_t msTicks = 0;
void delay_ms(uint16_t nms)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
	  uint32_t startTick = msTicks;  // Record the start tick
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <delay_ms+0x30>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	60fb      	str	r3, [r7, #12]
    while ((msTicks - startTick) < nms);  // Wait until the required time has passed
 8000620:	bf00      	nop
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <delay_ms+0x30>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	1ad2      	subs	r2, r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f8      	bcc.n	8000622 <delay_ms+0x12>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000088 	.word	0x20000088

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f001 f9cf 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f82f 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f7ff ffa7 	bl	80005a4 <MX_GPIO_Init>
  MX_TIM9_Init();
 8000656:	f000 fc27 	bl	8000ea8 <MX_TIM9_Init>
  MX_RTC_Init();
 800065a:	f000 fa01 	bl	8000a60 <MX_RTC_Init>
  MX_TIM2_Init();
 800065e:	f000 fbd5 	bl	8000e0c <MX_TIM2_Init>
  //MX_USART1_UART_Init();
  //MX_USART2_UART_Init();
  MX_USART3_UART_Init();
 8000662:	f000 fcef 	bl	8001044 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	float fAcc[3], fGyro[3], fAngle[3];
	int i;
	SysTick_Init();
 8000666:	f7ff ff81 	bl	800056c <SysTick_Init>
	Usart1Init(921600);
 800066a:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 800066e:	f000 fc91 	bl	8000f94 <Usart1Init>
	Usart၂Init(921600);
 8000672:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8000676:	f000 fcb9 	bl	8000fec <Usart၂Init>
	WitInit(WIT_PROTOCOL_NORMAL, 0x50);
 800067a:	2150      	movs	r1, #80	; 0x50
 800067c:	2000      	movs	r0, #0
 800067e:	f001 f941 	bl	8001904 <WitInit>
	WitSerialWriteRegister(SensorUartSend);
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <main+0x5c>)
 8000684:	f000 feda 	bl	800143c <WitSerialWriteRegister>
	WitRegisterCallBack(SensorDataUpdata);
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <main+0x60>)
 800068a:	f001 f81d 	bl	80016c8 <WitRegisterCallBack>
	WitDelayMsRegister(Delayms);
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <main+0x64>)
 8000690:	f001 f95a 	bl	8001948 <WitDelayMsRegister>
	printf("\r\n********************** wit-motion normal example  ************************\r\n");
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <main+0x68>)
 8000696:	f004 fb93 	bl	8004dc0 <puts>
	AutoScanSensor();
 800069a:	f000 f985 	bl	80009a8 <AutoScanSensor>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069e:	e7fe      	b.n	800069e <main+0x5a>
 80006a0:	080008b1 	.word	0x080008b1
 80006a4:	080008e5 	.word	0x080008e5
 80006a8:	080008cb 	.word	0x080008cb
 80006ac:	08005ac8 	.word	0x08005ac8

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fc5e 	bl	8004f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a28      	ldr	r2, [pc, #160]	; (8000780 <SystemClock_Config+0xd0>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <SystemClock_Config+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemClock_Config+0xd4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <SystemClock_Config+0xd4>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemClock_Config+0xd4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800070c:	2309      	movs	r3, #9
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000728:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000732:	2307      	movs	r3, #7
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fcf4 	bl	8002128 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000746:	f000 f985 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000756:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2105      	movs	r1, #5
 8000768:	4618      	mov	r0, r3
 800076a:	f001 ff55 	bl	8002618 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000774:	f000 f96e 	bl	8000a54 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3750      	adds	r7, #80	; 0x50
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <CopeCmdData>:

/* USER CODE BEGIN 4 */
/* ************* ROM ADD */
void CopeCmdData(unsigned char ucData)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	static unsigned char s_ucData[50], s_ucRxCnt = 0;
	
	s_ucData[s_ucRxCnt++] = ucData;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <CopeCmdData+0x88>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	b2d1      	uxtb	r1, r2
 800079a:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <CopeCmdData+0x88>)
 800079c:	7011      	strb	r1, [r2, #0]
 800079e:	4619      	mov	r1, r3
 80007a0:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <CopeCmdData+0x8c>)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	5453      	strb	r3, [r2, r1]
	if(s_ucRxCnt<3)return;										//Less than three data returned
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <CopeCmdData+0x88>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d92b      	bls.n	8000806 <CopeCmdData+0x7e>
	if(s_ucRxCnt >= 50) s_ucRxCnt = 0;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <CopeCmdData+0x88>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b31      	cmp	r3, #49	; 0x31
 80007b4:	d902      	bls.n	80007bc <CopeCmdData+0x34>
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <CopeCmdData+0x88>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
	if(s_ucRxCnt >= 3)
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <CopeCmdData+0x88>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d921      	bls.n	8000808 <CopeCmdData+0x80>
	{
		if((s_ucData[1] == '\r') && (s_ucData[2] == '\n'))
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <CopeCmdData+0x8c>)
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	2b0d      	cmp	r3, #13
 80007ca:	d110      	bne.n	80007ee <CopeCmdData+0x66>
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <CopeCmdData+0x8c>)
 80007ce:	789b      	ldrb	r3, [r3, #2]
 80007d0:	2b0a      	cmp	r3, #10
 80007d2:	d10c      	bne.n	80007ee <CopeCmdData+0x66>
		{
			s_cCmd = s_ucData[0];
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <CopeCmdData+0x8c>)
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <CopeCmdData+0x90>)
 80007da:	701a      	strb	r2, [r3, #0]
			memset(s_ucData,0,50);//
 80007dc:	2232      	movs	r2, #50	; 0x32
 80007de:	2100      	movs	r1, #0
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <CopeCmdData+0x8c>)
 80007e2:	f004 fbcd 	bl	8004f80 <memset>
			s_ucRxCnt = 0;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <CopeCmdData+0x88>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e00c      	b.n	8000808 <CopeCmdData+0x80>
		}
		else 
		{
			s_ucData[0] = s_ucData[1];
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <CopeCmdData+0x8c>)
 80007f0:	785a      	ldrb	r2, [r3, #1]
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <CopeCmdData+0x8c>)
 80007f4:	701a      	strb	r2, [r3, #0]
			s_ucData[1] = s_ucData[2];
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <CopeCmdData+0x8c>)
 80007f8:	789a      	ldrb	r2, [r3, #2]
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <CopeCmdData+0x8c>)
 80007fc:	705a      	strb	r2, [r3, #1]
			s_ucRxCnt = 2;
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <CopeCmdData+0x88>)
 8000800:	2202      	movs	r2, #2
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	e000      	b.n	8000808 <CopeCmdData+0x80>
	if(s_ucRxCnt<3)return;										//Less than three data returned
 8000806:	bf00      	nop
			
		}
	}

}
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000090 	.word	0x20000090
 8000814:	20000094 	.word	0x20000094
 8000818:	20000000 	.word	0x20000000

0800081c <ShowHelp>:
static void ShowHelp(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	printf("\r\n************************	 WIT_SDK_DEMO	************************");
 8000820:	4815      	ldr	r0, [pc, #84]	; (8000878 <ShowHelp+0x5c>)
 8000822:	f004 fa67 	bl	8004cf4 <iprintf>
	printf("\r\n************************          HELP           ************************\r\n");
 8000826:	4815      	ldr	r0, [pc, #84]	; (800087c <ShowHelp+0x60>)
 8000828:	f004 faca 	bl	8004dc0 <puts>
	printf("UART SEND:a\\r\\n   Acceleration calibration.\r\n");
 800082c:	4814      	ldr	r0, [pc, #80]	; (8000880 <ShowHelp+0x64>)
 800082e:	f004 fac7 	bl	8004dc0 <puts>
	printf("UART SEND:m\\r\\n   Magnetic field calibration,After calibration send:   e\\r\\n   to indicate the end\r\n");
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <ShowHelp+0x68>)
 8000834:	f004 fac4 	bl	8004dc0 <puts>
	printf("UART SEND:U\\r\\n   Bandwidth increase.\r\n");
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <ShowHelp+0x6c>)
 800083a:	f004 fac1 	bl	8004dc0 <puts>
	printf("UART SEND:u\\r\\n   Bandwidth reduction.\r\n");
 800083e:	4813      	ldr	r0, [pc, #76]	; (800088c <ShowHelp+0x70>)
 8000840:	f004 fabe 	bl	8004dc0 <puts>
	printf("UART SEND:B\\r\\n   Baud rate increased to 115200.\r\n");
 8000844:	4812      	ldr	r0, [pc, #72]	; (8000890 <ShowHelp+0x74>)
 8000846:	f004 fabb 	bl	8004dc0 <puts>
	printf("UART SEND:b\\r\\n   Baud rate reduction to 9600.\r\n");
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <ShowHelp+0x78>)
 800084c:	f004 fab8 	bl	8004dc0 <puts>
	printf("UART SEND:R\\r\\n   The return rate increases to 10Hz.\r\n");
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <ShowHelp+0x7c>)
 8000852:	f004 fab5 	bl	8004dc0 <puts>
	printf("UART SEND:r\\r\\n   The return rate reduction to 1Hz.\r\n");
 8000856:	4811      	ldr	r0, [pc, #68]	; (800089c <ShowHelp+0x80>)
 8000858:	f004 fab2 	bl	8004dc0 <puts>
	printf("UART SEND:C\\r\\n   Basic return content: acceleration, angular velocity, angle, magnetic field.\r\n");
 800085c:	4810      	ldr	r0, [pc, #64]	; (80008a0 <ShowHelp+0x84>)
 800085e:	f004 faaf 	bl	8004dc0 <puts>
	printf("UART SEND:c\\r\\n   Return content: acceleration.\r\n");
 8000862:	4810      	ldr	r0, [pc, #64]	; (80008a4 <ShowHelp+0x88>)
 8000864:	f004 faac 	bl	8004dc0 <puts>
	printf("UART SEND:h\\r\\n   help.\r\n");
 8000868:	480f      	ldr	r0, [pc, #60]	; (80008a8 <ShowHelp+0x8c>)
 800086a:	f004 faa9 	bl	8004dc0 <puts>
	printf("******************************************************************************\r\n");
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <ShowHelp+0x90>)
 8000870:	f004 faa6 	bl	8004dc0 <puts>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	08005b18 	.word	0x08005b18
 800087c:	08005b5c 	.word	0x08005b5c
 8000880:	08005bac 	.word	0x08005bac
 8000884:	08005bdc 	.word	0x08005bdc
 8000888:	08005c40 	.word	0x08005c40
 800088c:	08005c68 	.word	0x08005c68
 8000890:	08005c90 	.word	0x08005c90
 8000894:	08005cc4 	.word	0x08005cc4
 8000898:	08005cf4 	.word	0x08005cf4
 800089c:	08005d2c 	.word	0x08005d2c
 80008a0:	08005d64 	.word	0x08005d64
 80008a4:	08005dc4 	.word	0x08005dc4
 80008a8:	08005df8 	.word	0x08005df8
 80008ac:	08005e14 	.word	0x08005e14

080008b0 <SensorUartSend>:
	}
	s_cCmd = 0xff;
}

static void SensorUartSend(uint8_t *p_data, uint32_t uiSize)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	Uart2Send(p_data, uiSize);
 80008ba:	6839      	ldr	r1, [r7, #0]
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 fd2f 	bl	8001320 <Uart2Send>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <Delayms>:

static void Delayms(uint16_t ucMs)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	80fb      	strh	r3, [r7, #6]
	delay_ms(ucMs);
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe9a 	bl	8000610 <delay_ms>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <SensorDataUpdata>:

static void SensorDataUpdata(uint32_t uiReg, uint32_t uiRegNum)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	int i;
    for(i = 0; i < uiRegNum; i++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e045      	b.n	8000980 <SensorDataUpdata+0x9c>
    {
        switch(uiReg)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3b36      	subs	r3, #54	; 0x36
 80008f8:	2b09      	cmp	r3, #9
 80008fa:	d83b      	bhi.n	8000974 <SensorDataUpdata+0x90>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <SensorDataUpdata+0x20>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	0800092d 	.word	0x0800092d
 8000908:	08000975 	.word	0x08000975
 800090c:	08000975 	.word	0x08000975
 8000910:	0800093f 	.word	0x0800093f
 8000914:	08000975 	.word	0x08000975
 8000918:	08000975 	.word	0x08000975
 800091c:	08000951 	.word	0x08000951
 8000920:	08000975 	.word	0x08000975
 8000924:	08000975 	.word	0x08000975
 8000928:	08000963 	.word	0x08000963
        {
//            case AX:
//            case AY:
            case AZ:
				s_cDataUpdate1 |= ACC_UPDATE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <SensorDataUpdata+0xb4>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <SensorDataUpdata+0xb4>)
 800093a:	701a      	strb	r2, [r3, #0]
            break;
 800093c:	e01a      	b.n	8000974 <SensorDataUpdata+0x90>
//            case GX:
//            case GY:
            case GZ:
				s_cDataUpdate2 |= GYRO_UPDATE;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <SensorDataUpdata+0xb8>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <SensorDataUpdata+0xb8>)
 800094c:	701a      	strb	r2, [r3, #0]
            break;
 800094e:	e011      	b.n	8000974 <SensorDataUpdata+0x90>
//            case HX:
//            case HY:
            case HZ:
				s_cDataUpdate4 |= MAG_UPDATE;
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <SensorDataUpdata+0xbc>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f043 0308 	orr.w	r3, r3, #8
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <SensorDataUpdata+0xbc>)
 800095e:	701a      	strb	r2, [r3, #0]
            break;
 8000960:	e008      	b.n	8000974 <SensorDataUpdata+0x90>
//            case Roll:
//            case Pitch:
            case Yaw:
				s_cDataUpdate3 |= ANGLE_UPDATE;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <SensorDataUpdata+0xc0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <SensorDataUpdata+0xc0>)
 8000970:	701a      	strb	r2, [r3, #0]
            break;
 8000972:	bf00      	nop
//            default:
//				s_cDataUpdate1 |= READ_UPDATE;
//			break;
        }
		uiReg++;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3301      	adds	r3, #1
 8000978:	607b      	str	r3, [r7, #4]
    for(i = 0; i < uiRegNum; i++)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3301      	adds	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8b5      	bhi.n	80008f4 <SensorDataUpdata+0x10>
    }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2000008c 	.word	0x2000008c
 800099c:	2000008d 	.word	0x2000008d
 80009a0:	2000008f 	.word	0x2000008f
 80009a4:	2000008e 	.word	0x2000008e

080009a8 <AutoScanSensor>:

static void AutoScanSensor(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
	int i, iRetry;
	
	for(i = 1; i < 10; i++)
 80009ae:	2301      	movs	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	e02b      	b.n	8000a0c <AutoScanSensor+0x64>
	{
		Usart၂Init(c_uiBaud[i]);
 80009b4:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <AutoScanSensor+0x7c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 fb15 	bl	8000fec <Usart၂Init>
		iRetry = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	603b      	str	r3, [r7, #0]
		do
		{
			s_cDataUpdate1 = 0;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <AutoScanSensor+0x80>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
			WitReadReg(AX, 3);
 80009cc:	2103      	movs	r1, #3
 80009ce:	2034      	movs	r0, #52	; 0x34
 80009d0:	f000 fe90 	bl	80016f4 <WitReadReg>
			delay_ms(100);
 80009d4:	2064      	movs	r0, #100	; 0x64
 80009d6:	f7ff fe1b 	bl	8000610 <delay_ms>
			if(s_cDataUpdate1 != 0)
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <AutoScanSensor+0x80>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00a      	beq.n	80009fa <AutoScanSensor+0x52>
			{
				printf("%ld baud find sensor\r\n\r\n", c_uiBaud[i]);
 80009e4:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <AutoScanSensor+0x7c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ec:	4619      	mov	r1, r3
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <AutoScanSensor+0x84>)
 80009f0:	f004 f980 	bl	8004cf4 <iprintf>
				ShowHelp();
 80009f4:	f7ff ff12 	bl	800081c <ShowHelp>
				return ;
 80009f8:	e011      	b.n	8000a1e <AutoScanSensor+0x76>
			}
			iRetry--;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	603b      	str	r3, [r7, #0]
		}while(iRetry);		
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1df      	bne.n	80009c6 <AutoScanSensor+0x1e>
	for(i = 1; i < 10; i++)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b09      	cmp	r3, #9
 8000a10:	ddd0      	ble.n	80009b4 <AutoScanSensor+0xc>
	}
	printf("can not find sensor\r\n");
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <AutoScanSensor+0x88>)
 8000a14:	f004 f9d4 	bl	8004dc0 <puts>
	printf("please check your connection\r\n");
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <AutoScanSensor+0x8c>)
 8000a1a:	f004 f9d1 	bl	8004dc0 <puts>
}
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08005f3c 	.word	0x08005f3c
 8000a28:	2000008c 	.word	0x2000008c
 8000a2c:	08005ee8 	.word	0x08005ee8
 8000a30:	08005f04 	.word	0x08005f04
 8000a34:	08005f1c 	.word	0x08005f1c

08000a38 <SysTick_Handler>:
void SysTick_Handler(void) {
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
    msTicks++;  // Increment the tick counter
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <SysTick_Handler+0x18>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <SysTick_Handler+0x18>)
 8000a44:	6013      	str	r3, [r2, #0]
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	20000088 	.word	0x20000088

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2228      	movs	r2, #40	; 0x28
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f004 fa7d 	bl	8004f80 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <MX_RTC_Init+0x124>)
 8000a88:	4a3f      	ldr	r2, [pc, #252]	; (8000b88 <MX_RTC_Init+0x128>)
 8000a8a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a8c:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <MX_RTC_Init+0x124>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <MX_RTC_Init+0x124>)
 8000a94:	227f      	movs	r2, #127	; 0x7f
 8000a96:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a98:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <MX_RTC_Init+0x124>)
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <MX_RTC_Init+0x124>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aa4:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <MX_RTC_Init+0x124>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_RTC_Init+0x124>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ab0:	4834      	ldr	r0, [pc, #208]	; (8000b84 <MX_RTC_Init+0x124>)
 8000ab2:	f002 f8b3 	bl	8002c1c <HAL_RTC_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000abc:	f7ff ffca 	bl	8000a54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8000ac0:	2323      	movs	r3, #35	; 0x23
 8000ac2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 8000ac6:	2359      	movs	r3, #89	; 0x59
 8000ac8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 8000acc:	2345      	movs	r3, #69	; 0x45
 8000ace:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4828      	ldr	r0, [pc, #160]	; (8000b84 <MX_RTC_Init+0x124>)
 8000ae4:	f002 f91d 	bl	8002d22 <HAL_RTC_SetTime>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000aee:	f7ff ffb1 	bl	8000a54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000af2:	2306      	movs	r3, #6
 8000af4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x27;
 8000afe:	2327      	movs	r3, #39	; 0x27
 8000b00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4619      	mov	r1, r3
 8000b12:	481c      	ldr	r0, [pc, #112]	; (8000b84 <MX_RTC_Init+0x124>)
 8000b14:	f002 f99f 	bl	8002e56 <HAL_RTC_SetDate>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000b1e:	f7ff ff99 	bl	8000a54 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	2201      	movs	r2, #1
 8000b56:	4619      	mov	r1, r3
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <MX_RTC_Init+0x124>)
 8000b5a:	f002 fa01 	bl	8002f60 <HAL_RTC_SetAlarm_IT>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000b64:	f7ff ff76 	bl	8000a54 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_RTC_Init+0x124>)
 8000b6e:	f002 fc2b 	bl	80033c8 <HAL_RTCEx_SetWakeUpTimer>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000b78:	f7ff ff6c 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3740      	adds	r7, #64	; 0x40
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000c8 	.word	0x200000c8
 8000b88:	40002800 	.word	0x40002800

08000b8c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_RTC_MspInit+0x5c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d119      	bne.n	8000be0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bac:	2302      	movs	r3, #2
 8000bae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 ff4c 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000bc6:	f7ff ff45 	bl	8000a54 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_RTC_MspInit+0x60>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2029      	movs	r0, #41	; 0x29
 8000bd6:	f001 f842 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000bda:	2029      	movs	r0, #41	; 0x29
 8000bdc:	f001 f85b 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40002800 	.word	0x40002800
 8000bec:	42470e3c 	.word	0x42470e3c

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f001 f80a 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000c8e:	f002 fc91 	bl	80035b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000134 	.word	0x20000134

08000c9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <USART3_IRQHandler+0x10>)
 8000ca2:	f003 f897 	bl	8003dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000020c 	.word	0x2000020c

08000cb0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <RTC_Alarm_IRQHandler+0x10>)
 8000cb6:	f002 fa97 	bl	80031e8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000c8 	.word	0x200000c8

08000cc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	e00a      	b.n	8000cec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cd6:	f3af 8000 	nop.w
 8000cda:	4601      	mov	r1, r0
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf0      	blt.n	8000cd6 <_read+0x12>
  }

  return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e009      	b.n	8000d24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60ba      	str	r2, [r7, #8]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbf1      	blt.n	8000d10 <_write+0x12>
  }
  return len;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_close>:

int _close(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f004 f924 	bl	800501c <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20020000 	.word	0x20020000
 8000e00:	00004000 	.word	0x00004000
 8000e04:	200000e8 	.word	0x200000e8
 8000e08:	200005f8 	.word	0x200005f8

08000e0c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e32:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e40:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e52:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e54:	f002 fb5f 	bl	8003516 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e5e:	f7ff fdf9 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e70:	f002 fc90 	bl	8003794 <HAL_TIM_ConfigClockSource>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e7a:	f7ff fdeb 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e7e:	2320      	movs	r3, #32
 8000e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e8c:	f002 fec2 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e96:	f7ff fddd 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000ec 	.word	0x200000ec

08000ea8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_TIM9_Init+0x6c>)
 8000ebc:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <MX_TIM9_Init+0x70>)
 8000ebe:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_TIM9_Init+0x6c>)
 8000ec2:	22a7      	movs	r2, #167	; 0xa7
 8000ec4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_TIM9_Init+0x6c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_TIM9_Init+0x6c>)
 8000ece:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ed2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_TIM9_Init+0x6c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_TIM9_Init+0x6c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_TIM9_Init+0x6c>)
 8000ee2:	f002 fb18 	bl	8003516 <HAL_TIM_Base_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000eec:	f7ff fdb2 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_TIM9_Init+0x6c>)
 8000efc:	f002 fc4a 	bl	8003794 <HAL_TIM_ConfigClockSource>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000f06:	f7ff fda5 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000134 	.word	0x20000134
 8000f18:	40014000 	.word	0x40014000

08000f1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2c:	d10e      	bne.n	8000f4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_TIM_Base_MspInit+0x70>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <HAL_TIM_Base_MspInit+0x70>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <HAL_TIM_Base_MspInit+0x70>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8000f4a:	e01a      	b.n	8000f82 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM9)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_TIM_Base_MspInit+0x74>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d115      	bne.n	8000f82 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_TIM_Base_MspInit+0x70>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <HAL_TIM_Base_MspInit+0x70>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_TIM_Base_MspInit+0x70>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2018      	movs	r0, #24
 8000f78:	f000 fe71 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f7c:	2018      	movs	r0, #24
 8000f7e:	f000 fe8a 	bl	8001c96 <HAL_NVIC_EnableIRQ>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40014000 	.word	0x40014000

08000f94 <Usart1Init>:

/* USART1 init function */

void MX_USART1_UART_Init(void){}
void Usart1Init(unsigned int uiBaud)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <Usart1Init+0x50>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <Usart1Init+0x54>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = uiBaud;
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <Usart1Init+0x50>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <Usart1Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <Usart1Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <Usart1Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <Usart1Init+0x50>)
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <Usart1Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <Usart1Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <Usart1Init+0x50>)
 8000fce:	f002 feb1 	bl	8003d34 <HAL_UART_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <Usart1Init+0x48>
  {
    Error_Handler();
 8000fd8:	f7ff fd3c 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000017c 	.word	0x2000017c
 8000fe8:	40011000 	.word	0x40011000

08000fec <Usart၂Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void){}
void Usart၂Init(unsigned int uiBaud)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <Usart၂Init+0x50>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <Usart၂Init+0x54>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = uiBaud;
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <Usart၂Init+0x50>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6053      	str	r3, [r2, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <Usart၂Init+0x50>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <Usart၂Init+0x50>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <Usart၂Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <Usart၂Init+0x50>)
 8001014:	220c      	movs	r2, #12
 8001016:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <Usart၂Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <Usart၂Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <Usart၂Init+0x50>)
 8001026:	f002 fe85 	bl	8003d34 <HAL_UART_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <Usart၂Init+0x48>
  {
    Error_Handler();
 8001030:	f7ff fd10 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200001c4 	.word	0x200001c4
 8001040:	40004400 	.word	0x40004400

08001044 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART3_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800107c:	f002 fe5a 	bl	8003d34 <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f7ff fce5 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000020c 	.word	0x2000020c
 8001094:	40004800 	.word	0x40004800

08001098 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08e      	sub	sp, #56	; 0x38
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a58      	ldr	r2, [pc, #352]	; (8001218 <HAL_UART_MspInit+0x180>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d135      	bne.n	8001126 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
 80010be:	4b57      	ldr	r3, [pc, #348]	; (800121c <HAL_UART_MspInit+0x184>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a56      	ldr	r2, [pc, #344]	; (800121c <HAL_UART_MspInit+0x184>)
 80010c4:	f043 0310 	orr.w	r3, r3, #16
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b54      	ldr	r3, [pc, #336]	; (800121c <HAL_UART_MspInit+0x184>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	623b      	str	r3, [r7, #32]
 80010d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	4b50      	ldr	r3, [pc, #320]	; (800121c <HAL_UART_MspInit+0x184>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a4f      	ldr	r2, [pc, #316]	; (800121c <HAL_UART_MspInit+0x184>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b4d      	ldr	r3, [pc, #308]	; (800121c <HAL_UART_MspInit+0x184>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001104:	2307      	movs	r3, #7
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4844      	ldr	r0, [pc, #272]	; (8001220 <HAL_UART_MspInit+0x188>)
 8001110:	f000 fe6e 	bl	8001df0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2025      	movs	r0, #37	; 0x25
 800111a:	f000 fda0 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800111e:	2025      	movs	r0, #37	; 0x25
 8001120:	f000 fdb9 	bl	8001c96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001124:	e073      	b.n	800120e <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a3e      	ldr	r2, [pc, #248]	; (8001224 <HAL_UART_MspInit+0x18c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d134      	bne.n	800119a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	4b39      	ldr	r3, [pc, #228]	; (800121c <HAL_UART_MspInit+0x184>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a38      	ldr	r2, [pc, #224]	; (800121c <HAL_UART_MspInit+0x184>)
 800113a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_UART_MspInit+0x184>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	4b32      	ldr	r3, [pc, #200]	; (800121c <HAL_UART_MspInit+0x184>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a31      	ldr	r2, [pc, #196]	; (800121c <HAL_UART_MspInit+0x184>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <HAL_UART_MspInit+0x184>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001168:	230c      	movs	r3, #12
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001178:	2307      	movs	r3, #7
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4827      	ldr	r0, [pc, #156]	; (8001220 <HAL_UART_MspInit+0x188>)
 8001184:	f000 fe34 	bl	8001df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2026      	movs	r0, #38	; 0x26
 800118e:	f000 fd66 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001192:	2026      	movs	r0, #38	; 0x26
 8001194:	f000 fd7f 	bl	8001c96 <HAL_NVIC_EnableIRQ>
}
 8001198:	e039      	b.n	800120e <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a22      	ldr	r2, [pc, #136]	; (8001228 <HAL_UART_MspInit+0x190>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d134      	bne.n	800120e <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_UART_MspInit+0x184>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <HAL_UART_MspInit+0x184>)
 80011ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b2:	6413      	str	r3, [r2, #64]	; 0x40
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_UART_MspInit+0x184>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_UART_MspInit+0x184>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <HAL_UART_MspInit+0x184>)
 80011ca:	f043 0302 	orr.w	r3, r3, #2
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_UART_MspInit+0x184>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ee:	2307      	movs	r3, #7
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <HAL_UART_MspInit+0x194>)
 80011fa:	f000 fdf9 	bl	8001df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2027      	movs	r0, #39	; 0x27
 8001204:	f000 fd2b 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001208:	2027      	movs	r0, #39	; 0x27
 800120a:	f000 fd44 	bl	8001c96 <HAL_NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3738      	adds	r7, #56	; 0x38
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40011000 	.word	0x40011000
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000
 8001224:	40004400 	.word	0x40004400
 8001228:	40004800 	.word	0x40004800
 800122c:	40020400 	.word	0x40020400

08001230 <USART_ReceiveData>:
}

/* USER CODE BEGIN 1 */
/* ROM DYNAMICS USART1 START */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	b29b      	uxth	r3, r3
 800123e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001242:	b29b      	uxth	r3, r3
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <USART1_IRQHandler>:

void CopeCmdData(unsigned char ucData);

void USART1_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
	unsigned char ucTemp;
	if(__HAL_UART_GET_FLAG(&huart1, UART_IT_RXNE) != RESET )
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <USART1_IRQHandler+0x50>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <USART1_IRQHandler+0x54>)
 800125e:	4013      	ands	r3, r2
 8001260:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <USART1_IRQHandler+0x54>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10c      	bne.n	8001280 <USART1_IRQHandler+0x30>
	//if(USART_GetITStatus(USART1, UART_IT_RXNE) != RESET)
	{
		ucTemp = USART_ReceiveData(USART1);
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <USART1_IRQHandler+0x58>)
 8001268:	f7ff ffe2 	bl	8001230 <USART_ReceiveData>
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
		CopeCmdData(ucTemp);
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fa88 	bl	8000788 <CopeCmdData>
		 __HAL_UART_CLEAR_FLAG(&huart1, UART_IT_RXNE);
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <USART1_IRQHandler+0x50>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <USART1_IRQHandler+0x5c>)
 800127e:	601a      	str	r2, [r3, #0]
		//USART_ClearITPendingBit(USART1, UART_IT_RXNE);
	}
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8001280:	2300      	movs	r3, #0
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <USART1_IRQHandler+0x50>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <USART1_IRQHandler+0x50>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
	//USART_ClearITPendingBit(USART2,UART_IT_ORE);
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000017c 	.word	0x2000017c
 80012a4:	10000020 	.word	0x10000020
 80012a8:	40011000 	.word	0x40011000
 80012ac:	efffffdf 	.word	0xefffffdf

080012b0 <USART_SendData>:

/* ROM DYNAMICS USART2 START */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	unsigned char ucTemp;
	if(__HAL_UART_GET_FLAG(&huart2, UART_IT_RXNE) != RESET )
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <USART2_IRQHandler+0x38>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <USART2_IRQHandler+0x3c>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <USART2_IRQHandler+0x3c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10c      	bne.n	8001304 <USART2_IRQHandler+0x30>
	//if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
	{
		ucTemp = USART_ReceiveData(USART2);
 80012ea:	480a      	ldr	r0, [pc, #40]	; (8001314 <USART2_IRQHandler+0x40>)
 80012ec:	f7ff ffa0 	bl	8001230 <USART_ReceiveData>
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
		WitSerialDataIn(ucTemp);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f8b6 	bl	8001468 <WitSerialDataIn>
		 __HAL_UART_CLEAR_FLAG(&huart1, UART_IT_RXNE);
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <USART2_IRQHandler+0x44>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <USART2_IRQHandler+0x48>)
 8001302:	601a      	str	r2, [r3, #0]
		//USART_ClearITPendingBit(USART2, USART_IT_RXNE);
	}
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200001c4 	.word	0x200001c4
 8001310:	10000020 	.word	0x10000020
 8001314:	40004400 	.word	0x40004400
 8001318:	2000017c 	.word	0x2000017c
 800131c:	efffffdf 	.word	0xefffffdf

08001320 <Uart2Send>:
void Uart2Send(unsigned char *p_data, unsigned int uiSize)
{	
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	unsigned int i;
	for(i = 0; i < uiSize; i++)
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	e013      	b.n	8001358 <Uart2Send+0x38>
	{
		while(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == RESET);
 8001330:	bf00      	nop
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <Uart2Send+0x5c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133c:	2b80      	cmp	r3, #128	; 0x80
 800133e:	d1f8      	bne.n	8001332 <Uart2Send+0x12>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
		USART_SendData(USART2, *p_data++);		
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	4619      	mov	r1, r3
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <Uart2Send+0x60>)
 800134e:	f7ff ffaf 	bl	80012b0 <USART_SendData>
	for(i = 0; i < uiSize; i++)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3301      	adds	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3e7      	bcc.n	8001330 <Uart2Send+0x10>
	}
	while(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == RESET);
 8001360:	bf00      	nop
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <Uart2Send+0x5c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136c:	2b80      	cmp	r3, #128	; 0x80
 800136e:	d1f8      	bne.n	8001362 <Uart2Send+0x42>
	//while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001c4 	.word	0x200001c4
 8001380:	40004400 	.word	0x40004400

08001384 <__CRC16>:
    0x40
};


static uint16_t __CRC16(uint8_t *puchMsg, uint16_t usDataLen)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
    uint8_t uchCRCHi = 0xFF;
 8001390:	23ff      	movs	r3, #255	; 0xff
 8001392:	75fb      	strb	r3, [r7, #23]
    uint8_t uchCRCLo = 0xFF;
 8001394:	23ff      	movs	r3, #255	; 0xff
 8001396:	75bb      	strb	r3, [r7, #22]
    uint8_t uIndex;
    int i = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
    uchCRCHi = 0xFF;
 800139c:	23ff      	movs	r3, #255	; 0xff
 800139e:	75fb      	strb	r3, [r7, #23]
    uchCRCLo = 0xFF;
 80013a0:	23ff      	movs	r3, #255	; 0xff
 80013a2:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 80013a4:	e013      	b.n	80013ce <__CRC16+0x4a>
    {
        uIndex = uchCRCHi ^ puchMsg[i];
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	781a      	ldrb	r2, [r3, #0]
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	4053      	eors	r3, r2
 80013b2:	73fb      	strb	r3, [r7, #15]
        uchCRCHi = uchCRCLo ^ __auchCRCHi[uIndex];
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <__CRC16+0x70>)
 80013b8:	5cd2      	ldrb	r2, [r2, r3]
 80013ba:	7dbb      	ldrb	r3, [r7, #22]
 80013bc:	4053      	eors	r3, r2
 80013be:	75fb      	strb	r3, [r7, #23]
        uchCRCLo = __auchCRCLo[uIndex] ;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <__CRC16+0x74>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	3301      	adds	r3, #1
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dbe7      	blt.n	80013a6 <__CRC16+0x22>
    }
    return (uint16_t)(((uint16_t)uchCRCHi << 8) | (uint16_t)uchCRCLo) ;
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	7dbb      	ldrb	r3, [r7, #22]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	b29b      	uxth	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	08005f64 	.word	0x08005f64
 80013f8:	08006064 	.word	0x08006064

080013fc <__CaliSum>:
static uint8_t __CaliSum(uint8_t *data, uint32_t len)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint8_t ucCheck = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	72fb      	strb	r3, [r7, #11]
    for(i=0; i<len; i++) ucCheck += *(data + i);
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e009      	b.n	8001424 <__CaliSum+0x28>
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4413      	add	r3, r2
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	7afb      	ldrb	r3, [r7, #11]
 800141a:	4413      	add	r3, r2
 800141c:	72fb      	strb	r3, [r7, #11]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3301      	adds	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d3f1      	bcc.n	8001410 <__CaliSum+0x14>
    return ucCheck;
 800142c:	7afb      	ldrb	r3, [r7, #11]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <WitSerialWriteRegister>:
int32_t WitSerialWriteRegister(SerialWrite Write_func)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    if(!Write_func)return WIT_HAL_INVAL;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <WitSerialWriteRegister+0x14>
 800144a:	f06f 0305 	mvn.w	r3, #5
 800144e:	e003      	b.n	8001458 <WitSerialWriteRegister+0x1c>
    p_WitSerialWriteFunc = Write_func;
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <WitSerialWriteRegister+0x28>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	20000254 	.word	0x20000254

08001468 <WitSerialDataIn>:
		p_WitRegUpdateCbFunc(uiReg2, uiReg2Len);
	}
}

void WitSerialDataIn(uint8_t ucData)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
    uint16_t usCRC16, usTemp, i, usData[4];
    uint8_t ucSum;

    if(p_WitRegUpdateCbFunc == NULL)return ;
 8001472:	4b8b      	ldr	r3, [pc, #556]	; (80016a0 <WitSerialDataIn+0x238>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 810b 	beq.w	8001692 <WitSerialDataIn+0x22a>
    s_ucWitDataBuff[s_uiWitDataCnt++] = ucData;
 800147c:	4b89      	ldr	r3, [pc, #548]	; (80016a4 <WitSerialDataIn+0x23c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	4988      	ldr	r1, [pc, #544]	; (80016a4 <WitSerialDataIn+0x23c>)
 8001484:	600a      	str	r2, [r1, #0]
 8001486:	4988      	ldr	r1, [pc, #544]	; (80016a8 <WitSerialDataIn+0x240>)
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	54ca      	strb	r2, [r1, r3]
    switch(s_uiProtoclo)
 800148c:	4b87      	ldr	r3, [pc, #540]	; (80016ac <WitSerialDataIn+0x244>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b03      	cmp	r3, #3
 8001492:	f200 80f5 	bhi.w	8001680 <WitSerialDataIn+0x218>
 8001496:	2b02      	cmp	r3, #2
 8001498:	f080 80eb 	bcs.w	8001672 <WitSerialDataIn+0x20a>
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <WitSerialDataIn+0x3e>
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d06d      	beq.n	8001580 <WitSerialDataIn+0x118>
 80014a4:	e0ec      	b.n	8001680 <WitSerialDataIn+0x218>
    {
        case WIT_PROTOCOL_NORMAL:
            if(s_ucWitDataBuff[0] != 0x55)
 80014a6:	4b80      	ldr	r3, [pc, #512]	; (80016a8 <WitSerialDataIn+0x240>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b55      	cmp	r3, #85	; 0x55
 80014ac:	d00c      	beq.n	80014c8 <WitSerialDataIn+0x60>
            {
                s_uiWitDataCnt--;
 80014ae:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <WitSerialDataIn+0x23c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	4a7b      	ldr	r2, [pc, #492]	; (80016a4 <WitSerialDataIn+0x23c>)
 80014b6:	6013      	str	r3, [r2, #0]
                memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 80014b8:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <WitSerialDataIn+0x23c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	497c      	ldr	r1, [pc, #496]	; (80016b0 <WitSerialDataIn+0x248>)
 80014c0:	4879      	ldr	r0, [pc, #484]	; (80016a8 <WitSerialDataIn+0x240>)
 80014c2:	f003 fdd8 	bl	8005076 <memcpy>
                return ;
 80014c6:	e0e7      	b.n	8001698 <WitSerialDataIn+0x230>
            }
            if(s_uiWitDataCnt >= 11)
 80014c8:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <WitSerialDataIn+0x23c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b0a      	cmp	r3, #10
 80014ce:	f240 80d4 	bls.w	800167a <WitSerialDataIn+0x212>
            {
                ucSum = __CaliSum(s_ucWitDataBuff, 10);
 80014d2:	210a      	movs	r1, #10
 80014d4:	4874      	ldr	r0, [pc, #464]	; (80016a8 <WitSerialDataIn+0x240>)
 80014d6:	f7ff ff91 	bl	80013fc <__CaliSum>
 80014da:	4603      	mov	r3, r0
 80014dc:	747b      	strb	r3, [r7, #17]
                if(ucSum != s_ucWitDataBuff[10])
 80014de:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <WitSerialDataIn+0x240>)
 80014e0:	7a9b      	ldrb	r3, [r3, #10]
 80014e2:	7c7a      	ldrb	r2, [r7, #17]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d00c      	beq.n	8001502 <WitSerialDataIn+0x9a>
                {
                    s_uiWitDataCnt--;
 80014e8:	4b6e      	ldr	r3, [pc, #440]	; (80016a4 <WitSerialDataIn+0x23c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	4a6d      	ldr	r2, [pc, #436]	; (80016a4 <WitSerialDataIn+0x23c>)
 80014f0:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <WitSerialDataIn+0x23c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	496d      	ldr	r1, [pc, #436]	; (80016b0 <WitSerialDataIn+0x248>)
 80014fa:	486b      	ldr	r0, [pc, #428]	; (80016a8 <WitSerialDataIn+0x240>)
 80014fc:	f003 fdbb 	bl	8005076 <memcpy>
                    return ;
 8001500:	e0ca      	b.n	8001698 <WitSerialDataIn+0x230>
                }
                usData[0] = ((uint16_t)s_ucWitDataBuff[3] << 8) | (uint16_t)s_ucWitDataBuff[2];
 8001502:	4b69      	ldr	r3, [pc, #420]	; (80016a8 <WitSerialDataIn+0x240>)
 8001504:	78db      	ldrb	r3, [r3, #3]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <WitSerialDataIn+0x240>)
 800150c:	789b      	ldrb	r3, [r3, #2]
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b21b      	sxth	r3, r3
 8001514:	b29b      	uxth	r3, r3
 8001516:	813b      	strh	r3, [r7, #8]
                usData[1] = ((uint16_t)s_ucWitDataBuff[5] << 8) | (uint16_t)s_ucWitDataBuff[4];
 8001518:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <WitSerialDataIn+0x240>)
 800151a:	795b      	ldrb	r3, [r3, #5]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <WitSerialDataIn+0x240>)
 8001522:	791b      	ldrb	r3, [r3, #4]
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21b      	sxth	r3, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	817b      	strh	r3, [r7, #10]
                usData[2] = ((uint16_t)s_ucWitDataBuff[7] << 8) | (uint16_t)s_ucWitDataBuff[6];
 800152e:	4b5e      	ldr	r3, [pc, #376]	; (80016a8 <WitSerialDataIn+0x240>)
 8001530:	79db      	ldrb	r3, [r3, #7]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <WitSerialDataIn+0x240>)
 8001538:	799b      	ldrb	r3, [r3, #6]
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21b      	sxth	r3, r3
 8001540:	b29b      	uxth	r3, r3
 8001542:	81bb      	strh	r3, [r7, #12]
                usData[3] = ((uint16_t)s_ucWitDataBuff[9] << 8) | (uint16_t)s_ucWitDataBuff[8];
 8001544:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <WitSerialDataIn+0x240>)
 8001546:	7a5b      	ldrb	r3, [r3, #9]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <WitSerialDataIn+0x240>)
 800154e:	7a1b      	ldrb	r3, [r3, #8]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21b      	sxth	r3, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	81fb      	strh	r3, [r7, #14]
//                CopeWitData(s_ucWitDataBuff[1], usData, 4);
                s_uiWitDataCnt = 0;
 800155a:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <WitSerialDataIn+0x23c>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
								ucRegIndex = s_ucWitDataBuff[1];
 8001560:	4b51      	ldr	r3, [pc, #324]	; (80016a8 <WitSerialDataIn+0x240>)
 8001562:	785a      	ldrb	r2, [r3, #1]
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <WitSerialDataIn+0x24c>)
 8001566:	701a      	strb	r2, [r3, #0]
								memcpy(usRegDataBuff,usData,8);
 8001568:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <WitSerialDataIn+0x250>)
 800156a:	461a      	mov	r2, r3
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001574:	e882 0003 	stmia.w	r2, {r0, r1}
								uiRegDataLen = 4;
 8001578:	4b50      	ldr	r3, [pc, #320]	; (80016bc <WitSerialDataIn+0x254>)
 800157a:	2204      	movs	r2, #4
 800157c:	601a      	str	r2, [r3, #0]
            }
        break;
 800157e:	e07c      	b.n	800167a <WitSerialDataIn+0x212>
        case WIT_PROTOCOL_MODBUS:
            if(s_uiWitDataCnt > 2)
 8001580:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <WitSerialDataIn+0x23c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d97a      	bls.n	800167e <WitSerialDataIn+0x216>
            {
                if(s_ucWitDataBuff[1] != FuncR)
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <WitSerialDataIn+0x240>)
 800158a:	785b      	ldrb	r3, [r3, #1]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d00c      	beq.n	80015aa <WitSerialDataIn+0x142>
                {
                    s_uiWitDataCnt--;
 8001590:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <WitSerialDataIn+0x23c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	4a43      	ldr	r2, [pc, #268]	; (80016a4 <WitSerialDataIn+0x23c>)
 8001598:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 800159a:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <WitSerialDataIn+0x23c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4943      	ldr	r1, [pc, #268]	; (80016b0 <WitSerialDataIn+0x248>)
 80015a2:	4841      	ldr	r0, [pc, #260]	; (80016a8 <WitSerialDataIn+0x240>)
 80015a4:	f003 fd67 	bl	8005076 <memcpy>
                    return ;
 80015a8:	e076      	b.n	8001698 <WitSerialDataIn+0x230>
                }
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <WitSerialDataIn+0x240>)
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	3305      	adds	r3, #5
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <WitSerialDataIn+0x23c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d86d      	bhi.n	8001696 <WitSerialDataIn+0x22e>
                usTemp = ((uint16_t)s_ucWitDataBuff[s_uiWitDataCnt-2] << 8) | s_ucWitDataBuff[s_uiWitDataCnt-1];
 80015ba:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <WitSerialDataIn+0x23c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3b02      	subs	r3, #2
 80015c0:	4a39      	ldr	r2, [pc, #228]	; (80016a8 <WitSerialDataIn+0x240>)
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <WitSerialDataIn+0x23c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4936      	ldr	r1, [pc, #216]	; (80016a8 <WitSerialDataIn+0x240>)
 80015d0:	5ccb      	ldrb	r3, [r1, r3]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	82bb      	strh	r3, [r7, #20]
                usCRC16 = __CRC16(s_ucWitDataBuff, s_uiWitDataCnt-2);
 80015da:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <WitSerialDataIn+0x23c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3b02      	subs	r3, #2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	4830      	ldr	r0, [pc, #192]	; (80016a8 <WitSerialDataIn+0x240>)
 80015e8:	f7ff fecc 	bl	8001384 <__CRC16>
 80015ec:	4603      	mov	r3, r0
 80015ee:	827b      	strh	r3, [r7, #18]
                if(usTemp != usCRC16)
 80015f0:	8aba      	ldrh	r2, [r7, #20]
 80015f2:	8a7b      	ldrh	r3, [r7, #18]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d00c      	beq.n	8001612 <WitSerialDataIn+0x1aa>
                {
                    s_uiWitDataCnt--;
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <WitSerialDataIn+0x23c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <WitSerialDataIn+0x23c>)
 8001600:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <WitSerialDataIn+0x23c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4929      	ldr	r1, [pc, #164]	; (80016b0 <WitSerialDataIn+0x248>)
 800160a:	4827      	ldr	r0, [pc, #156]	; (80016a8 <WitSerialDataIn+0x240>)
 800160c:	f003 fd33 	bl	8005076 <memcpy>
                    return ;
 8001610:	e042      	b.n	8001698 <WitSerialDataIn+0x230>
                }
                usTemp = s_ucWitDataBuff[2] >> 1;
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <WitSerialDataIn+0x240>)
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	82bb      	strh	r3, [r7, #20]
                for(i = 0; i < usTemp; i++)
 800161c:	2300      	movs	r3, #0
 800161e:	82fb      	strh	r3, [r7, #22]
 8001620:	e018      	b.n	8001654 <WitSerialDataIn+0x1ec>
                {
                    sReg[i+s_uiReadRegIndex] = ((uint16_t)s_ucWitDataBuff[(i<<1)+3] << 8) | s_ucWitDataBuff[(i<<1)+4];
 8001622:	8afb      	ldrh	r3, [r7, #22]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	3303      	adds	r3, #3
 8001628:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <WitSerialDataIn+0x240>)
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b219      	sxth	r1, r3
 8001630:	8afb      	ldrh	r3, [r7, #22]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	3304      	adds	r3, #4
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <WitSerialDataIn+0x240>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	b21a      	sxth	r2, r3
 800163c:	8af8      	ldrh	r0, [r7, #22]
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <WitSerialDataIn+0x258>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4403      	add	r3, r0
 8001644:	430a      	orrs	r2, r1
 8001646:	b211      	sxth	r1, r2
 8001648:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <WitSerialDataIn+0x25c>)
 800164a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < usTemp; i++)
 800164e:	8afb      	ldrh	r3, [r7, #22]
 8001650:	3301      	adds	r3, #1
 8001652:	82fb      	strh	r3, [r7, #22]
 8001654:	8afa      	ldrh	r2, [r7, #22]
 8001656:	8abb      	ldrh	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	d3e2      	bcc.n	8001622 <WitSerialDataIn+0x1ba>
                }
                p_WitRegUpdateCbFunc(s_uiReadRegIndex, usTemp);
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <WitSerialDataIn+0x238>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <WitSerialDataIn+0x258>)
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	8ab9      	ldrh	r1, [r7, #20]
 8001666:	4610      	mov	r0, r2
 8001668:	4798      	blx	r3
                s_uiWitDataCnt = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <WitSerialDataIn+0x23c>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
            }
        break;
 8001670:	e005      	b.n	800167e <WitSerialDataIn+0x216>
        case WIT_PROTOCOL_CAN:
        case WIT_PROTOCOL_I2C:
        s_uiWitDataCnt = 0;
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <WitSerialDataIn+0x23c>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
        break;
 8001678:	e002      	b.n	8001680 <WitSerialDataIn+0x218>
        break;
 800167a:	bf00      	nop
 800167c:	e000      	b.n	8001680 <WitSerialDataIn+0x218>
        break;
 800167e:	bf00      	nop
    }
    if(s_uiWitDataCnt == WIT_DATA_BUFF_SIZE)s_uiWitDataCnt = 0;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <WitSerialDataIn+0x23c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001688:	d106      	bne.n	8001698 <WitSerialDataIn+0x230>
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <WitSerialDataIn+0x23c>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e002      	b.n	8001698 <WitSerialDataIn+0x230>
    if(p_WitRegUpdateCbFunc == NULL)return ;
 8001692:	bf00      	nop
 8001694:	e000      	b.n	8001698 <WitSerialDataIn+0x230>
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 8001696:	bf00      	nop
}
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000260 	.word	0x20000260
 80016a4:	20000368 	.word	0x20000368
 80016a8:	20000268 	.word	0x20000268
 80016ac:	2000036c 	.word	0x2000036c
 80016b0:	20000269 	.word	0x20000269
 80016b4:	20000494 	.word	0x20000494
 80016b8:	20000498 	.word	0x20000498
 80016bc:	200004a0 	.word	0x200004a0
 80016c0:	20000370 	.word	0x20000370
 80016c4:	20000374 	.word	0x20000374

080016c8 <WitRegisterCallBack>:
        case WIT_PROTOCOL_I2C:
            break;
    }
}
int32_t WitRegisterCallBack(RegUpdateCb update_func)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    if(!update_func)return WIT_HAL_INVAL;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <WitRegisterCallBack+0x14>
 80016d6:	f06f 0305 	mvn.w	r3, #5
 80016da:	e003      	b.n	80016e4 <WitRegisterCallBack+0x1c>
    p_WitRegUpdateCbFunc = update_func;
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <WitRegisterCallBack+0x28>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000260 	.word	0x20000260

080016f4 <WitReadReg>:
            return WIT_HAL_INVAL;        
    }
    return WIT_HAL_OK;
}
int32_t WitReadReg(uint32_t uiReg, uint32_t uiReadNum)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
    uint16_t usTemp, i;
    uint8_t ucBuff[8];
    if((uiReg + uiReadNum) >= REGSIZE)return WIT_HAL_INVAL;
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	2b8f      	cmp	r3, #143	; 0x8f
 8001706:	d902      	bls.n	800170e <WitReadReg+0x1a>
 8001708:	f06f 0305 	mvn.w	r3, #5
 800170c:	e0e4      	b.n	80018d8 <WitReadReg+0x1e4>
    switch(s_uiProtoclo)
 800170e:	4b74      	ldr	r3, [pc, #464]	; (80018e0 <WitReadReg+0x1ec>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b03      	cmp	r3, #3
 8001714:	f200 80d8 	bhi.w	80018c8 <WitReadReg+0x1d4>
 8001718:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <WitReadReg+0x2c>)
 800171a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171e:	bf00      	nop
 8001720:	08001731 	.word	0x08001731
 8001724:	08001775 	.word	0x08001775
 8001728:	080017ed 	.word	0x080017ed
 800172c:	08001833 	.word	0x08001833
    {
        case WIT_PROTOCOL_NORMAL:
            if(uiReadNum > 4)return WIT_HAL_INVAL;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b04      	cmp	r3, #4
 8001734:	d902      	bls.n	800173c <WitReadReg+0x48>
 8001736:	f06f 0305 	mvn.w	r3, #5
 800173a:	e0cd      	b.n	80018d8 <WitReadReg+0x1e4>
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 800173c:	4b69      	ldr	r3, [pc, #420]	; (80018e4 <WitReadReg+0x1f0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <WitReadReg+0x56>
 8001744:	f06f 0304 	mvn.w	r3, #4
 8001748:	e0c6      	b.n	80018d8 <WitReadReg+0x1e4>
            ucBuff[0] = 0xFF;
 800174a:	23ff      	movs	r3, #255	; 0xff
 800174c:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 800174e:	23aa      	movs	r3, #170	; 0xaa
 8001750:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8001752:	2327      	movs	r3, #39	; 0x27
 8001754:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b2db      	uxtb	r3, r3
 8001762:	743b      	strb	r3, [r7, #16]
            p_WitSerialWriteFunc(ucBuff, 5);
 8001764:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <WitReadReg+0x1f0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f107 020c 	add.w	r2, r7, #12
 800176c:	2105      	movs	r1, #5
 800176e:	4610      	mov	r0, r2
 8001770:	4798      	blx	r3
            break;
 8001772:	e0ad      	b.n	80018d0 <WitReadReg+0x1dc>
        case WIT_PROTOCOL_MODBUS:
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8001774:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <WitReadReg+0x1f0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <WitReadReg+0x8e>
 800177c:	f06f 0304 	mvn.w	r3, #4
 8001780:	e0aa      	b.n	80018d8 <WitReadReg+0x1e4>
            usTemp = uiReadNum << 1;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	82bb      	strh	r3, [r7, #20]
            if((usTemp + 5) > WIT_DATA_BUFF_SIZE)return WIT_HAL_NOMEM;
 800178a:	8abb      	ldrh	r3, [r7, #20]
 800178c:	2bfb      	cmp	r3, #251	; 0xfb
 800178e:	d902      	bls.n	8001796 <WitReadReg+0xa2>
 8001790:	f06f 0303 	mvn.w	r3, #3
 8001794:	e0a0      	b.n	80018d8 <WitReadReg+0x1e4>
            ucBuff[0] = s_ucAddr;
 8001796:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <WitReadReg+0x1f4>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = FuncR;
 800179c:	2303      	movs	r3, #3
 800179e:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = uiReg >> 8;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xFF;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReadNum >> 8;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	743b      	strb	r3, [r7, #16]
            ucBuff[5] = uiReadNum & 0xff;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	747b      	strb	r3, [r7, #17]
            usTemp = __CRC16(ucBuff, 6);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2106      	movs	r1, #6
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fdde 	bl	8001384 <__CRC16>
 80017c8:	4603      	mov	r3, r0
 80017ca:	82bb      	strh	r3, [r7, #20]
            ucBuff[6] = usTemp >> 8;
 80017cc:	8abb      	ldrh	r3, [r7, #20]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	74bb      	strb	r3, [r7, #18]
            ucBuff[7] = usTemp & 0xff;
 80017d6:	8abb      	ldrh	r3, [r7, #20]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	74fb      	strb	r3, [r7, #19]
            p_WitSerialWriteFunc(ucBuff, 8);
 80017dc:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <WitReadReg+0x1f0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f107 020c 	add.w	r2, r7, #12
 80017e4:	2108      	movs	r1, #8
 80017e6:	4610      	mov	r0, r2
 80017e8:	4798      	blx	r3
            break;
 80017ea:	e071      	b.n	80018d0 <WitReadReg+0x1dc>
        case WIT_PROTOCOL_CAN:
            if(uiReadNum > 3)return WIT_HAL_INVAL;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d902      	bls.n	80017f8 <WitReadReg+0x104>
 80017f2:	f06f 0305 	mvn.w	r3, #5
 80017f6:	e06f      	b.n	80018d8 <WitReadReg+0x1e4>
            if(p_WitCanWriteFunc == NULL)return WIT_HAL_EMPTY;
 80017f8:	4b3c      	ldr	r3, [pc, #240]	; (80018ec <WitReadReg+0x1f8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <WitReadReg+0x112>
 8001800:	f06f 0304 	mvn.w	r3, #4
 8001804:	e068      	b.n	80018d8 <WitReadReg+0x1e4>
            ucBuff[0] = 0xFF;
 8001806:	23ff      	movs	r3, #255	; 0xff
 8001808:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 800180a:	23aa      	movs	r3, #170	; 0xaa
 800180c:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 800180e:	2327      	movs	r3, #39	; 0x27
 8001810:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b2db      	uxtb	r3, r3
 800181e:	743b      	strb	r3, [r7, #16]
            p_WitCanWriteFunc(s_ucAddr, ucBuff, 5);
 8001820:	4b32      	ldr	r3, [pc, #200]	; (80018ec <WitReadReg+0x1f8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a30      	ldr	r2, [pc, #192]	; (80018e8 <WitReadReg+0x1f4>)
 8001826:	7810      	ldrb	r0, [r2, #0]
 8001828:	f107 010c 	add.w	r1, r7, #12
 800182c:	2205      	movs	r2, #5
 800182e:	4798      	blx	r3
            break;
 8001830:	e04e      	b.n	80018d0 <WitReadReg+0x1dc>
        case WIT_PROTOCOL_I2C:
            if(p_WitI2cReadFunc == NULL)return WIT_HAL_EMPTY;
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <WitReadReg+0x1fc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <WitReadReg+0x14c>
 800183a:	f06f 0304 	mvn.w	r3, #4
 800183e:	e04b      	b.n	80018d8 <WitReadReg+0x1e4>
            usTemp = uiReadNum << 1;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	82bb      	strh	r3, [r7, #20]
            if(WIT_DATA_BUFF_SIZE < usTemp)return WIT_HAL_NOMEM;
 8001848:	8abb      	ldrh	r3, [r7, #20]
 800184a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800184e:	d902      	bls.n	8001856 <WitReadReg+0x162>
 8001850:	f06f 0303 	mvn.w	r3, #3
 8001854:	e040      	b.n	80018d8 <WitReadReg+0x1e4>
            if(p_WitI2cReadFunc(s_ucAddr << 1, uiReg, s_ucWitDataBuff, usTemp) == 1)
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <WitReadReg+0x1fc>)
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <WitReadReg+0x1f4>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	b2d8      	uxtb	r0, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	b2d9      	uxtb	r1, r3
 8001866:	8abb      	ldrh	r3, [r7, #20]
 8001868:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <WitReadReg+0x200>)
 800186a:	47a0      	blx	r4
 800186c:	4603      	mov	r3, r0
 800186e:	2b01      	cmp	r3, #1
 8001870:	d12d      	bne.n	80018ce <WitReadReg+0x1da>
            {
                if(p_WitRegUpdateCbFunc == NULL)return WIT_HAL_EMPTY;
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <WitReadReg+0x204>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <WitReadReg+0x18c>
 800187a:	f06f 0304 	mvn.w	r3, #4
 800187e:	e02b      	b.n	80018d8 <WitReadReg+0x1e4>
                for(i = 0; i < uiReadNum; i++)
 8001880:	2300      	movs	r3, #0
 8001882:	82fb      	strh	r3, [r7, #22]
 8001884:	e016      	b.n	80018b4 <WitReadReg+0x1c0>
                {
                    sReg[i+uiReg] = ((uint16_t)s_ucWitDataBuff[(i<<1)+1] << 8) | s_ucWitDataBuff[i<<1];
 8001886:	8afb      	ldrh	r3, [r7, #22]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	3301      	adds	r3, #1
 800188c:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <WitReadReg+0x200>)
 800188e:	5cd3      	ldrb	r3, [r2, r3]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b219      	sxth	r1, r3
 8001894:	8afb      	ldrh	r3, [r7, #22]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <WitReadReg+0x200>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	b21a      	sxth	r2, r3
 800189e:	8af8      	ldrh	r0, [r7, #22]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4403      	add	r3, r0
 80018a4:	430a      	orrs	r2, r1
 80018a6:	b211      	sxth	r1, r2
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <WitReadReg+0x208>)
 80018aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < uiReadNum; i++)
 80018ae:	8afb      	ldrh	r3, [r7, #22]
 80018b0:	3301      	adds	r3, #1
 80018b2:	82fb      	strh	r3, [r7, #22]
 80018b4:	8afb      	ldrh	r3, [r7, #22]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d8e4      	bhi.n	8001886 <WitReadReg+0x192>
                }
                p_WitRegUpdateCbFunc(uiReg, uiReadNum);
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <WitReadReg+0x204>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
            }
			
            break;
 80018c6:	e002      	b.n	80018ce <WitReadReg+0x1da>
		default: 
            return WIT_HAL_INVAL;
 80018c8:	f06f 0305 	mvn.w	r3, #5
 80018cc:	e004      	b.n	80018d8 <WitReadReg+0x1e4>
            break;
 80018ce:	bf00      	nop
    }
    s_uiReadRegIndex = uiReg;
 80018d0:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <WitReadReg+0x20c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]

    return WIT_HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	2000036c 	.word	0x2000036c
 80018e4:	20000254 	.word	0x20000254
 80018e8:	20000001 	.word	0x20000001
 80018ec:	2000025c 	.word	0x2000025c
 80018f0:	20000258 	.word	0x20000258
 80018f4:	20000268 	.word	0x20000268
 80018f8:	20000260 	.word	0x20000260
 80018fc:	20000374 	.word	0x20000374
 8001900:	20000370 	.word	0x20000370

08001904 <WitInit>:
int32_t WitInit(uint32_t uiProtocol, uint8_t ucAddr)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
	if(uiProtocol > WIT_PROTOCOL_I2C)return WIT_HAL_INVAL;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d902      	bls.n	800191c <WitInit+0x18>
 8001916:	f06f 0305 	mvn.w	r3, #5
 800191a:	e009      	b.n	8001930 <WitInit+0x2c>
    s_uiProtoclo = uiProtocol;
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <WitInit+0x38>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
    s_ucAddr = ucAddr;
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <WitInit+0x3c>)
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	7013      	strb	r3, [r2, #0]
    s_uiWitDataCnt = 0;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <WitInit+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
    return WIT_HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	2000036c 	.word	0x2000036c
 8001940:	20000001 	.word	0x20000001
 8001944:	20000368 	.word	0x20000368

08001948 <WitDelayMsRegister>:
    s_uiWitDataCnt = 0;
    s_uiProtoclo = 0;
}

int32_t WitDelayMsRegister(DelaymsCb delayms_func)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    if(!delayms_func)return WIT_HAL_INVAL;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <WitDelayMsRegister+0x14>
 8001956:	f06f 0305 	mvn.w	r3, #5
 800195a:	e003      	b.n	8001964 <WitDelayMsRegister+0x1c>
    p_WitDelaymsFunc = delayms_func;
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <WitDelayMsRegister+0x28>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	20000264 	.word	0x20000264

08001974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001978:	f000 f826 	bl	80019c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800197e:	490d      	ldr	r1, [pc, #52]	; (80019b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001980:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001994:	4c0a      	ldr	r4, [pc, #40]	; (80019c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019a2:	f003 fb41 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a6:	f7fe fe4d 	bl	8000644 <main>
  bx  lr    
 80019aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80019b8:	080061c0 	.word	0x080061c0
  ldr r2, =_sbss
 80019bc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80019c0:	200005f4 	.word	0x200005f4

080019c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC_IRQHandler>
	...

080019c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <SystemInit+0x20>)
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <SystemInit+0x20>)
 80019d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_Init+0x40>)
 80019f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_Init+0x40>)
 8001a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_Init+0x40>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f917 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff f8e6 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f92f 	bl	8001cb2 <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 f8f7 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000004 	.word	0x20000004
 8001a88:	2000000c 	.word	0x2000000c
 8001a8c:	20000008 	.word	0x20000008

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200004a4 	.word	0x200004a4

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4907      	ldr	r1, [pc, #28]	; (8001b44 <__NVIC_EnableIRQ+0x38>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff8e 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff29 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff3e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff8e 	bl	8001b9c <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff31 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff feda 	bl	8001a90 <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d008      	beq.n	8001cfc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e052      	b.n	8001da2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0216 	bic.w	r2, r2, #22
 8001d0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <HAL_DMA_Abort+0x62>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0208 	bic.w	r2, r2, #8
 8001d3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4c:	e013      	b.n	8001d76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4e:	f7ff fe9f 	bl	8001a90 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d90c      	bls.n	8001d76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e015      	b.n	8001da2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e4      	bne.n	8001d4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	223f      	movs	r2, #63	; 0x3f
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e00c      	b.n	8001de2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2205      	movs	r2, #5
 8001dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e16b      	b.n	80020e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f040 815a 	bne.w	80020de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d005      	beq.n	8001e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d130      	bne.n	8001ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 0201 	and.w	r2, r3, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d017      	beq.n	8001ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d123      	bne.n	8001f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	69b9      	ldr	r1, [r7, #24]
 8001f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0203 	and.w	r2, r3, #3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80b4 	beq.w	80020de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b60      	ldr	r3, [pc, #384]	; (80020fc <HAL_GPIO_Init+0x30c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a5f      	ldr	r2, [pc, #380]	; (80020fc <HAL_GPIO_Init+0x30c>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_GPIO_Init+0x30c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f92:	4a5b      	ldr	r2, [pc, #364]	; (8002100 <HAL_GPIO_Init+0x310>)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	220f      	movs	r2, #15
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_GPIO_Init+0x314>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d02b      	beq.n	8002016 <HAL_GPIO_Init+0x226>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a51      	ldr	r2, [pc, #324]	; (8002108 <HAL_GPIO_Init+0x318>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d025      	beq.n	8002012 <HAL_GPIO_Init+0x222>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a50      	ldr	r2, [pc, #320]	; (800210c <HAL_GPIO_Init+0x31c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01f      	beq.n	800200e <HAL_GPIO_Init+0x21e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4f      	ldr	r2, [pc, #316]	; (8002110 <HAL_GPIO_Init+0x320>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d019      	beq.n	800200a <HAL_GPIO_Init+0x21a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4e      	ldr	r2, [pc, #312]	; (8002114 <HAL_GPIO_Init+0x324>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x216>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4d      	ldr	r2, [pc, #308]	; (8002118 <HAL_GPIO_Init+0x328>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x212>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4c      	ldr	r2, [pc, #304]	; (800211c <HAL_GPIO_Init+0x32c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x20e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4b      	ldr	r2, [pc, #300]	; (8002120 <HAL_GPIO_Init+0x330>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x20a>
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	e00e      	b.n	8002018 <HAL_GPIO_Init+0x228>
 8001ffa:	2308      	movs	r3, #8
 8001ffc:	e00c      	b.n	8002018 <HAL_GPIO_Init+0x228>
 8001ffe:	2306      	movs	r3, #6
 8002000:	e00a      	b.n	8002018 <HAL_GPIO_Init+0x228>
 8002002:	2305      	movs	r3, #5
 8002004:	e008      	b.n	8002018 <HAL_GPIO_Init+0x228>
 8002006:	2304      	movs	r3, #4
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x228>
 800200a:	2303      	movs	r3, #3
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x228>
 800200e:	2302      	movs	r3, #2
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x228>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x228>
 8002016:	2300      	movs	r3, #0
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002028:	4935      	ldr	r1, [pc, #212]	; (8002100 <HAL_GPIO_Init+0x310>)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002036:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <HAL_GPIO_Init+0x334>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205a:	4a32      	ldr	r2, [pc, #200]	; (8002124 <HAL_GPIO_Init+0x334>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002060:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_GPIO_Init+0x334>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002084:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_GPIO_Init+0x334>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_GPIO_Init+0x334>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_GPIO_Init+0x334>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_GPIO_Init+0x334>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d8:	4a12      	ldr	r2, [pc, #72]	; (8002124 <HAL_GPIO_Init+0x334>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3301      	adds	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	f67f ae90 	bls.w	8001e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40013800 	.word	0x40013800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40021000 	.word	0x40021000
 8002118:	40021400 	.word	0x40021400
 800211c:	40021800 	.word	0x40021800
 8002120:	40021c00 	.word	0x40021c00
 8002124:	40013c00 	.word	0x40013c00

08002128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e267      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d075      	beq.n	8002232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002146:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b04      	cmp	r3, #4
 8002150:	d00c      	beq.n	800216c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002152:	4b85      	ldr	r3, [pc, #532]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215a:	2b08      	cmp	r3, #8
 800215c:	d112      	bne.n	8002184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800215e:	4b82      	ldr	r3, [pc, #520]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216a:	d10b      	bne.n	8002184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	4b7e      	ldr	r3, [pc, #504]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d05b      	beq.n	8002230 <HAL_RCC_OscConfig+0x108>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d157      	bne.n	8002230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e242      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218c:	d106      	bne.n	800219c <HAL_RCC_OscConfig+0x74>
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a75      	ldr	r2, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e01d      	b.n	80021d8 <HAL_RCC_OscConfig+0xb0>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x98>
 80021a6:	4b70      	ldr	r3, [pc, #448]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a6f      	ldr	r2, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80021ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6c      	ldr	r2, [pc, #432]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e00b      	b.n	80021d8 <HAL_RCC_OscConfig+0xb0>
 80021c0:	4b69      	ldr	r3, [pc, #420]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a68      	ldr	r2, [pc, #416]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80021c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b66      	ldr	r3, [pc, #408]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a65      	ldr	r2, [pc, #404]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80021d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d013      	beq.n	8002208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fc56 	bl	8001a90 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff fc52 	bl	8001a90 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e207      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0xc0>
 8002206:	e014      	b.n	8002232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fc42 	bl	8001a90 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fc3e 	bl	8001a90 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1f3      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	4b51      	ldr	r3, [pc, #324]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0xe8>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d063      	beq.n	8002306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002252:	2b08      	cmp	r3, #8
 8002254:	d11c      	bne.n	8002290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_RCC_OscConfig+0x152>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e1c7      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4937      	ldr	r1, [pc, #220]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	e03a      	b.n	8002306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_RCC_OscConfig+0x244>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7ff fbf7 	bl	8001a90 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a6:	f7ff fbf3 	bl	8001a90 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e1a8      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4925      	ldr	r1, [pc, #148]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]
 80022d8:	e015      	b.n	8002306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCC_OscConfig+0x244>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff fbd6 	bl	8001a90 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e8:	f7ff fbd2 	bl	8001a90 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e187      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d036      	beq.n	8002380 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d016      	beq.n	8002348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_RCC_OscConfig+0x248>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7ff fbb6 	bl	8001a90 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff fbb2 	bl	8001a90 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e167      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_OscConfig+0x240>)
 800233c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x200>
 8002346:	e01b      	b.n	8002380 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_OscConfig+0x248>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7ff fb9f 	bl	8001a90 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	e00e      	b.n	8002374 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002356:	f7ff fb9b 	bl	8001a90 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d907      	bls.n	8002374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e150      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
 8002368:	40023800 	.word	0x40023800
 800236c:	42470000 	.word	0x42470000
 8002370:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002374:	4b88      	ldr	r3, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ea      	bne.n	8002356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8097 	beq.w	80024bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002392:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10f      	bne.n	80023be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	4b7d      	ldr	r3, [pc, #500]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a7c      	ldr	r2, [pc, #496]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ba:	2301      	movs	r3, #1
 80023bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b77      	ldr	r3, [pc, #476]	; (800259c <HAL_RCC_OscConfig+0x474>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ca:	4b74      	ldr	r3, [pc, #464]	; (800259c <HAL_RCC_OscConfig+0x474>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a73      	ldr	r2, [pc, #460]	; (800259c <HAL_RCC_OscConfig+0x474>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d6:	f7ff fb5b 	bl	8001a90 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7ff fb57 	bl	8001a90 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e10c      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_OscConfig+0x474>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x2ea>
 8002404:	4b64      	ldr	r3, [pc, #400]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	4a63      	ldr	r2, [pc, #396]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6713      	str	r3, [r2, #112]	; 0x70
 8002410:	e01c      	b.n	800244c <HAL_RCC_OscConfig+0x324>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b05      	cmp	r3, #5
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x30c>
 800241a:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a5e      	ldr	r2, [pc, #376]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	6713      	str	r3, [r2, #112]	; 0x70
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a5b      	ldr	r2, [pc, #364]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6713      	str	r3, [r2, #112]	; 0x70
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0x324>
 8002434:	4b58      	ldr	r3, [pc, #352]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4a57      	ldr	r2, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	6713      	str	r3, [r2, #112]	; 0x70
 8002440:	4b55      	ldr	r3, [pc, #340]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	4a54      	ldr	r2, [pc, #336]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002446:	f023 0304 	bic.w	r3, r3, #4
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d015      	beq.n	8002480 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7ff fb1c 	bl	8001a90 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245a:	e00a      	b.n	8002472 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7ff fb18 	bl	8001a90 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e0cb      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002472:	4b49      	ldr	r3, [pc, #292]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0ee      	beq.n	800245c <HAL_RCC_OscConfig+0x334>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7ff fb06 	bl	8001a90 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7ff fb02 	bl	8001a90 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0b5      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1ee      	bne.n	8002488 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b0:	4b39      	ldr	r3, [pc, #228]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	4a38      	ldr	r2, [pc, #224]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 80024b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a1 	beq.w	8002608 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024c6:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d05c      	beq.n	800258c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d141      	bne.n	800255e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_OscConfig+0x478>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fad6 	bl	8001a90 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff fad2 	bl	8001a90 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e087      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69da      	ldr	r2, [r3, #28]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	019b      	lsls	r3, r3, #6
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	3b01      	subs	r3, #1
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	491b      	ldr	r1, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x478>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7ff faab 	bl	8001a90 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253e:	f7ff faa7 	bl	8001a90 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e05c      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x416>
 800255c:	e054      	b.n	8002608 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_OscConfig+0x478>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7ff fa94 	bl	8001a90 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7ff fa90 	bl	8001a90 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e045      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_OscConfig+0x470>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x444>
 800258a:	e03d      	b.n	8002608 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e038      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
 8002598:	40023800 	.word	0x40023800
 800259c:	40007000 	.word	0x40007000
 80025a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_RCC_OscConfig+0x4ec>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d028      	beq.n	8002604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d121      	bne.n	8002604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d11a      	bne.n	8002604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025dc:	4293      	cmp	r3, r2
 80025de:	d111      	bne.n	8002604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	3b01      	subs	r3, #1
 80025ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800

08002618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0cc      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b68      	ldr	r3, [pc, #416]	; (80027d0 <HAL_RCC_ClockConfig+0x1b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d90c      	bls.n	8002654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b65      	ldr	r3, [pc, #404]	; (80027d0 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b63      	ldr	r3, [pc, #396]	; (80027d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0b8      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d020      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800266c:	4b59      	ldr	r3, [pc, #356]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002676:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002684:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a52      	ldr	r2, [pc, #328]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800268e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002690:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	494d      	ldr	r1, [pc, #308]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d044      	beq.n	8002738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d119      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e07f      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d003      	beq.n	80026d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e06f      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e6:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e067      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b37      	ldr	r3, [pc, #220]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4934      	ldr	r1, [pc, #208]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	4313      	orrs	r3, r2
 8002706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002708:	f7ff f9c2 	bl	8001a90 <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7ff f9be 	bl	8001a90 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e04f      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <HAL_RCC_ClockConfig+0x1b8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d20c      	bcs.n	8002760 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e032      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4916      	ldr	r1, [pc, #88]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	490e      	ldr	r1, [pc, #56]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800279e:	f000 f821 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 80027a2:	4602      	mov	r2, r0
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	490a      	ldr	r1, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	5ccb      	ldrb	r3, [r1, r3]
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f936 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023c00 	.word	0x40023c00
 80027d4:	40023800 	.word	0x40023800
 80027d8:	08006164 	.word	0x08006164
 80027dc:	20000004 	.word	0x20000004
 80027e0:	20000008 	.word	0x20000008

080027e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e8:	b094      	sub	sp, #80	; 0x50
 80027ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	647b      	str	r3, [r7, #68]	; 0x44
 80027f0:	2300      	movs	r3, #0
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f4:	2300      	movs	r3, #0
 80027f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027fc:	4b79      	ldr	r3, [pc, #484]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b08      	cmp	r3, #8
 8002806:	d00d      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x40>
 8002808:	2b08      	cmp	r3, #8
 800280a:	f200 80e1 	bhi.w	80029d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x34>
 8002812:	2b04      	cmp	r3, #4
 8002814:	d003      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x3a>
 8002816:	e0db      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4b73      	ldr	r3, [pc, #460]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800281c:	e0db      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800281e:	4b73      	ldr	r3, [pc, #460]	; (80029ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002822:	e0d8      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002824:	4b6f      	ldr	r3, [pc, #444]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800282c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282e:	4b6d      	ldr	r3, [pc, #436]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d063      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283a:	4b6a      	ldr	r3, [pc, #424]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	099b      	lsrs	r3, r3, #6
 8002840:	2200      	movs	r2, #0
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
 8002844:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284c:	633b      	str	r3, [r7, #48]	; 0x30
 800284e:	2300      	movs	r3, #0
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
 8002852:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002856:	4622      	mov	r2, r4
 8002858:	462b      	mov	r3, r5
 800285a:	f04f 0000 	mov.w	r0, #0
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	0159      	lsls	r1, r3, #5
 8002864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002868:	0150      	lsls	r0, r2, #5
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4621      	mov	r1, r4
 8002870:	1a51      	subs	r1, r2, r1
 8002872:	6139      	str	r1, [r7, #16]
 8002874:	4629      	mov	r1, r5
 8002876:	eb63 0301 	sbc.w	r3, r3, r1
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002888:	4659      	mov	r1, fp
 800288a:	018b      	lsls	r3, r1, #6
 800288c:	4651      	mov	r1, sl
 800288e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002892:	4651      	mov	r1, sl
 8002894:	018a      	lsls	r2, r1, #6
 8002896:	4651      	mov	r1, sl
 8002898:	ebb2 0801 	subs.w	r8, r2, r1
 800289c:	4659      	mov	r1, fp
 800289e:	eb63 0901 	sbc.w	r9, r3, r1
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028b6:	4690      	mov	r8, r2
 80028b8:	4699      	mov	r9, r3
 80028ba:	4623      	mov	r3, r4
 80028bc:	eb18 0303 	adds.w	r3, r8, r3
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	462b      	mov	r3, r5
 80028c4:	eb49 0303 	adc.w	r3, r9, r3
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028d6:	4629      	mov	r1, r5
 80028d8:	024b      	lsls	r3, r1, #9
 80028da:	4621      	mov	r1, r4
 80028dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028e0:	4621      	mov	r1, r4
 80028e2:	024a      	lsls	r2, r1, #9
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ea:	2200      	movs	r2, #0
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028f4:	f7fd fcbc 	bl	8000270 <__aeabi_uldivmod>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4613      	mov	r3, r2
 80028fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002900:	e058      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002902:	4b38      	ldr	r3, [pc, #224]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	2200      	movs	r2, #0
 800290a:	4618      	mov	r0, r3
 800290c:	4611      	mov	r1, r2
 800290e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002912:	623b      	str	r3, [r7, #32]
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
 8002918:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800291c:	4642      	mov	r2, r8
 800291e:	464b      	mov	r3, r9
 8002920:	f04f 0000 	mov.w	r0, #0
 8002924:	f04f 0100 	mov.w	r1, #0
 8002928:	0159      	lsls	r1, r3, #5
 800292a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292e:	0150      	lsls	r0, r2, #5
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4641      	mov	r1, r8
 8002936:	ebb2 0a01 	subs.w	sl, r2, r1
 800293a:	4649      	mov	r1, r9
 800293c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800294c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002950:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002954:	ebb2 040a 	subs.w	r4, r2, sl
 8002958:	eb63 050b 	sbc.w	r5, r3, fp
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	00eb      	lsls	r3, r5, #3
 8002966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800296a:	00e2      	lsls	r2, r4, #3
 800296c:	4614      	mov	r4, r2
 800296e:	461d      	mov	r5, r3
 8002970:	4643      	mov	r3, r8
 8002972:	18e3      	adds	r3, r4, r3
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	464b      	mov	r3, r9
 8002978:	eb45 0303 	adc.w	r3, r5, r3
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800298a:	4629      	mov	r1, r5
 800298c:	028b      	lsls	r3, r1, #10
 800298e:	4621      	mov	r1, r4
 8002990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002994:	4621      	mov	r1, r4
 8002996:	028a      	lsls	r2, r1, #10
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299e:	2200      	movs	r2, #0
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	61fa      	str	r2, [r7, #28]
 80029a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029a8:	f7fd fc62 	bl	8000270 <__aeabi_uldivmod>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4613      	mov	r3, r2
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	3301      	adds	r3, #1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ce:	e002      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3750      	adds	r7, #80	; 0x50
 80029dc:	46bd      	mov	sp, r7
 80029de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	007a1200 	.word	0x007a1200

080029f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000004 	.word	0x20000004

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a0c:	f7ff fff0 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	0a9b      	lsrs	r3, r3, #10
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08006174 	.word	0x08006174

08002a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a34:	f7ff ffdc 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0b5b      	lsrs	r3, r3, #13
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08006174 	.word	0x08006174

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d035      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a86:	f7ff f803 	bl	8001a90 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a8e:	f7fe ffff 	bl	8001a90 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0b0      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aa0:	4b5b      	ldr	r3, [pc, #364]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	019a      	lsls	r2, r3, #6
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	071b      	lsls	r3, r3, #28
 8002ab8:	4955      	ldr	r1, [pc, #340]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ac0:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ac6:	f7fe ffe3 	bl	8001a90 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ace:	f7fe ffdf 	bl	8001a90 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e090      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ae0:	4b4b      	ldr	r3, [pc, #300]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8083 	beq.w	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a43      	ldr	r2, [pc, #268]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b16:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a3e      	ldr	r2, [pc, #248]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b22:	f7fe ffb5 	bl	8001a90 <HAL_GetTick>
 8002b26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7fe ffb1 	bl	8001a90 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e062      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b3c:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b48:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02f      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d028      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b70:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b76:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b7c:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d114      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7fe ff7f 	bl	8001a90 <HAL_GetTick>
 8002b92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe ff7b 	bl	8001a90 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e02a      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ee      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bc4:	d10d      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bda:	490d      	ldr	r1, [pc, #52]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
 8002be0:	e005      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002be8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bec:	6093      	str	r3, [r2, #8]
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfa:	4905      	ldr	r1, [pc, #20]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	42470068 	.word	0x42470068
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40007000 	.word	0x40007000
 8002c18:	42470e40 	.word	0x42470e40

08002c1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e073      	b.n	8002d1a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7f5b      	ldrb	r3, [r3, #29]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd ffa2 	bl	8000b8c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d055      	beq.n	8002d08 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	22ca      	movs	r2, #202	; 0xca
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2253      	movs	r2, #83	; 0x53
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fb31 	bl	80032d4 <RTC_EnterInitMode>
 8002c72:	4603      	mov	r3, r0
 8002c74:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d12c      	bne.n	8002cd6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6919      	ldr	r1, [r3, #16]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	041a      	lsls	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fb38 	bl	8003342 <RTC_ExitInitMode>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d110      	bne.n	8002cfe <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	22ff      	movs	r2, #255	; 0xff
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
 8002d06:	e001      	b.n	8002d0c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d22:	b590      	push	{r4, r7, lr}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	7f1b      	ldrb	r3, [r3, #28]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_RTC_SetTime+0x1c>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e087      	b.n	8002e4e <HAL_RTC_SetTime+0x12c>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2202      	movs	r2, #2
 8002d48:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d126      	bne.n	8002d9e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2200      	movs	r2, #0
 8002d62:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fb0f 	bl	800338c <RTC_ByteToBcd2>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fb08 	bl	800338c <RTC_ByteToBcd2>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d80:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	789b      	ldrb	r3, [r3, #2]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fb00 	bl	800338c <RTC_ByteToBcd2>
 8002d8c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d8e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	78db      	ldrb	r3, [r3, #3]
 8002d96:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e018      	b.n	8002dd0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2200      	movs	r2, #0
 8002db0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	785b      	ldrb	r3, [r3, #1]
 8002dbc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002dbe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002dc4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	78db      	ldrb	r3, [r3, #3]
 8002dca:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	22ca      	movs	r2, #202	; 0xca
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2253      	movs	r2, #83	; 0x53
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fa77 	bl	80032d4 <RTC_EnterInitMode>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d120      	bne.n	8002e32 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002dfa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002dfe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e0e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fa8a 	bl	8003342 <RTC_ExitInitMode>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	22ff      	movs	r2, #255	; 0xff
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]

  return status;
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd90      	pop	{r4, r7, pc}

08002e56 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e56:	b590      	push	{r4, r7, lr}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	7f1b      	ldrb	r3, [r3, #28]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_RTC_SetDate+0x1c>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e071      	b.n	8002f56 <HAL_RTC_SetDate+0x100>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10e      	bne.n	8002ea2 <HAL_RTC_SetDate+0x4c>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	785b      	ldrb	r3, [r3, #1]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	f023 0310 	bic.w	r3, r3, #16
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	330a      	adds	r3, #10
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d11c      	bne.n	8002ee2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	78db      	ldrb	r3, [r3, #3]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fa6d 	bl	800338c <RTC_ByteToBcd2>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fa66 	bl	800338c <RTC_ByteToBcd2>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ec4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	789b      	ldrb	r3, [r3, #2]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fa5e 	bl	800338c <RTC_ByteToBcd2>
 8002ed0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ed2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	e00e      	b.n	8002f00 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	78db      	ldrb	r3, [r3, #3]
 8002ee6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	785b      	ldrb	r3, [r3, #1]
 8002eec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002eee:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ef4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	22ca      	movs	r2, #202	; 0xca
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2253      	movs	r2, #83	; 0x53
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f9df 	bl	80032d4 <RTC_EnterInitMode>
 8002f16:	4603      	mov	r3, r0
 8002f18:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f2e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fa06 	bl	8003342 <RTC_ExitInitMode>
 8002f36:	4603      	mov	r3, r0
 8002f38:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	22ff      	movs	r2, #255	; 0xff
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]

  return status;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd90      	pop	{r4, r7, pc}
	...

08002f60 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002f6c:	4b9b      	ldr	r3, [pc, #620]	; (80031dc <HAL_RTC_SetAlarm_IT+0x27c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a9b      	ldr	r2, [pc, #620]	; (80031e0 <HAL_RTC_SetAlarm_IT+0x280>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0adb      	lsrs	r3, r3, #11
 8002f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	7f1b      	ldrb	r3, [r3, #28]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_RTC_SetAlarm_IT+0x36>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e11e      	b.n	80031d4 <HAL_RTC_SetAlarm_IT+0x274>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d137      	bne.n	8003018 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f9e3 	bl	800338c <RTC_ByteToBcd2>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f9dc 	bl	800338c <RTC_ByteToBcd2>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002fd8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	789b      	ldrb	r3, [r3, #2]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f9d4 	bl	800338c <RTC_ByteToBcd2>
 8002fe4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002fe6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	78db      	ldrb	r3, [r3, #3]
 8002fee:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002ff0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f9c6 	bl	800338c <RTC_ByteToBcd2>
 8003000:	4603      	mov	r3, r0
 8003002:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003004:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800300c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003012:	4313      	orrs	r3, r2
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e023      	b.n	8003060 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2200      	movs	r2, #0
 800302a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	785b      	ldrb	r3, [r3, #1]
 8003036:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003038:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800303e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	78db      	ldrb	r3, [r3, #3]
 8003044:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003046:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800304e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003050:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003056:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800305c:	4313      	orrs	r3, r2
 800305e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	22ca      	movs	r2, #202	; 0xca
 8003072:	625a      	str	r2, [r3, #36]	; 0x24
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2253      	movs	r2, #83	; 0x53
 800307a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003084:	d142      	bne.n	800310c <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003094:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80030a6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	22ff      	movs	r2, #255	; 0xff
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2203      	movs	r2, #3
 80030c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e083      	b.n	80031d4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0e6      	beq.n	80030a8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	e04c      	b.n	80031a6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800311a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f462 7220 	orn	r2, r2, #640	; 0x280
 800312c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800312e:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RTC_SetAlarm_IT+0x27c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2b      	ldr	r2, [pc, #172]	; (80031e0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	0adb      	lsrs	r3, r3, #11
 800313a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3b01      	subs	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	22ff      	movs	r2, #255	; 0xff
 8003156:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2203      	movs	r2, #3
 800315c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e035      	b.n	80031d4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0e6      	beq.n	8003144 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003194:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_RTC_SetAlarm_IT+0x284>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <HAL_RTC_SetAlarm_IT+0x284>)
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <HAL_RTC_SetAlarm_IT+0x284>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	4a0b      	ldr	r2, [pc, #44]	; (80031e4 <HAL_RTC_SetAlarm_IT+0x284>)
 80031b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031bc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	22ff      	movs	r2, #255	; 0xff
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3724      	adds	r7, #36	; 0x24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd90      	pop	{r4, r7, pc}
 80031dc:	20000004 	.word	0x20000004
 80031e0:	10624dd3 	.word	0x10624dd3
 80031e4:	40013c00 	.word	0x40013c00

080031e8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80031f0:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <HAL_RTC_AlarmIRQHandler+0x88>)
 80031f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031f6:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d012      	beq.n	800322c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003224:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f824 	bl	8003274 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d012      	beq.n	8003260 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00b      	beq.n	8003260 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003258:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f951 	bl	8003502 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	775a      	strb	r2, [r3, #29]
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_RTC_WaitForSynchro+0x48>)
 800329a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800329c:	f7fe fbf8 	bl	8001a90 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032a2:	e009      	b.n	80032b8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032a4:	f7fe fbf4 	bl	8001a90 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b2:	d901      	bls.n	80032b8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e007      	b.n	80032c8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0ee      	beq.n	80032a4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	00017f5f 	.word	0x00017f5f

080032d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d122      	bne.n	8003338 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003300:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003302:	f7fe fbc5 	bl	8001a90 <HAL_GetTick>
 8003306:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003308:	e00c      	b.n	8003324 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800330a:	f7fe fbc1 	bl	8001a90 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003318:	d904      	bls.n	8003324 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2204      	movs	r2, #4
 800331e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <RTC_EnterInitMode+0x64>
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d1e8      	bne.n	800330a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800335c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff8b 	bl	8003288 <HAL_RTC_WaitForSynchro>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2204      	movs	r2, #4
 800337c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800339a:	e005      	b.n	80033a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3301      	adds	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	3b0a      	subs	r3, #10
 80033a6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	2b09      	cmp	r3, #9
 80033ac:	d8f6      	bhi.n	800339c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b2db      	uxtb	r3, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	7f1b      	ldrb	r3, [r3, #28]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e08a      	b.n	80034fa <HAL_RTCEx_SetWakeUpTimer+0x132>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2202      	movs	r2, #2
 80033ee:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	22ca      	movs	r2, #202	; 0xca
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2253      	movs	r2, #83	; 0x53
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01e      	beq.n	800344c <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 800340e:	f7fe fb3f 	bl	8001a90 <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8003414:	e013      	b.n	800343e <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003416:	f7fe fb3b 	bl	8001a90 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003424:	d90b      	bls.n	800343e <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	22ff      	movs	r2, #255	; 0xff
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2203      	movs	r2, #3
 8003432:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e05d      	b.n	80034fa <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e4      	bne.n	8003416 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800346c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800346e:	f7fe fb0f 	bl	8001a90 <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003474:	e013      	b.n	800349e <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003476:	f7fe fb0b 	bl	8001a90 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003484:	d90b      	bls.n	800349e <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	22ff      	movs	r2, #255	; 0xff
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2203      	movs	r2, #3
 8003492:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e02d      	b.n	80034fa <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0e4      	beq.n	8003476 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0207 	bic.w	r2, r2, #7
 80034ba:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6899      	ldr	r1, [r3, #8]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034e2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	22ff      	movs	r2, #255	; 0xff
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e041      	b.n	80035ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fd fced 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f000 fa17 	bl	8003988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d020      	beq.n	8003618 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0202 	mvn.w	r2, #2
 80035e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9a3 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f995 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f9a6 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01b      	beq.n	8003664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0204 	mvn.w	r2, #4
 8003634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f97d 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f96f 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f980 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d020      	beq.n	80036b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01b      	beq.n	80036b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0208 	mvn.w	r2, #8
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2204      	movs	r2, #4
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f957 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f949 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f95a 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d020      	beq.n	80036fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01b      	beq.n	80036fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0210 	mvn.w	r2, #16
 80036cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2208      	movs	r2, #8
 80036d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f931 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f923 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f934 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0201 	mvn.w	r2, #1
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f901 	bl	8003922 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00c      	beq.n	8003744 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800373c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 faee 	bl	8003d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00c      	beq.n	8003768 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f905 	bl	8003972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0220 	mvn.w	r2, #32
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fac0 	bl	8003d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_TIM_ConfigClockSource+0x1c>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e0b4      	b.n	800391a <HAL_TIM_ConfigClockSource+0x186>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e8:	d03e      	beq.n	8003868 <HAL_TIM_ConfigClockSource+0xd4>
 80037ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ee:	f200 8087 	bhi.w	8003900 <HAL_TIM_ConfigClockSource+0x16c>
 80037f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f6:	f000 8086 	beq.w	8003906 <HAL_TIM_ConfigClockSource+0x172>
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fe:	d87f      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x16c>
 8003800:	2b70      	cmp	r3, #112	; 0x70
 8003802:	d01a      	beq.n	800383a <HAL_TIM_ConfigClockSource+0xa6>
 8003804:	2b70      	cmp	r3, #112	; 0x70
 8003806:	d87b      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x16c>
 8003808:	2b60      	cmp	r3, #96	; 0x60
 800380a:	d050      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x11a>
 800380c:	2b60      	cmp	r3, #96	; 0x60
 800380e:	d877      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b50      	cmp	r3, #80	; 0x50
 8003812:	d03c      	beq.n	800388e <HAL_TIM_ConfigClockSource+0xfa>
 8003814:	2b50      	cmp	r3, #80	; 0x50
 8003816:	d873      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d058      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x13a>
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d86f      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b30      	cmp	r3, #48	; 0x30
 8003822:	d064      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15a>
 8003824:	2b30      	cmp	r3, #48	; 0x30
 8003826:	d86b      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b20      	cmp	r3, #32
 800382a:	d060      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	2b20      	cmp	r3, #32
 800382e:	d867      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d05c      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15a>
 8003834:	2b10      	cmp	r3, #16
 8003836:	d05a      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15a>
 8003838:	e062      	b.n	8003900 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	f000 f9c3 	bl	8003bd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800385c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	609a      	str	r2, [r3, #8]
      break;
 8003866:	e04f      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003878:	f000 f9ac 	bl	8003bd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800388a:	609a      	str	r2, [r3, #8]
      break;
 800388c:	e03c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389a:	461a      	mov	r2, r3
 800389c:	f000 f920 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2150      	movs	r1, #80	; 0x50
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f979 	bl	8003b9e <TIM_ITRx_SetConfig>
      break;
 80038ac:	e02c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ba:	461a      	mov	r2, r3
 80038bc:	f000 f93f 	bl	8003b3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2160      	movs	r1, #96	; 0x60
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f969 	bl	8003b9e <TIM_ITRx_SetConfig>
      break;
 80038cc:	e01c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 f900 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2140      	movs	r1, #64	; 0x40
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f959 	bl	8003b9e <TIM_ITRx_SetConfig>
      break;
 80038ec:	e00c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f000 f950 	bl	8003b9e <TIM_ITRx_SetConfig>
      break;
 80038fe:	e003      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	e000      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a46      	ldr	r2, [pc, #280]	; (8003ab4 <TIM_Base_SetConfig+0x12c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d013      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a6:	d00f      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a43      	ldr	r2, [pc, #268]	; (8003ab8 <TIM_Base_SetConfig+0x130>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a42      	ldr	r2, [pc, #264]	; (8003abc <TIM_Base_SetConfig+0x134>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d007      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a41      	ldr	r2, [pc, #260]	; (8003ac0 <TIM_Base_SetConfig+0x138>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a40      	ldr	r2, [pc, #256]	; (8003ac4 <TIM_Base_SetConfig+0x13c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d108      	bne.n	80039da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a35      	ldr	r2, [pc, #212]	; (8003ab4 <TIM_Base_SetConfig+0x12c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02b      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d027      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a32      	ldr	r2, [pc, #200]	; (8003ab8 <TIM_Base_SetConfig+0x130>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d023      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a31      	ldr	r2, [pc, #196]	; (8003abc <TIM_Base_SetConfig+0x134>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01f      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <TIM_Base_SetConfig+0x138>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01b      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2f      	ldr	r2, [pc, #188]	; (8003ac4 <TIM_Base_SetConfig+0x13c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d017      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a2e      	ldr	r2, [pc, #184]	; (8003ac8 <TIM_Base_SetConfig+0x140>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a2d      	ldr	r2, [pc, #180]	; (8003acc <TIM_Base_SetConfig+0x144>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00f      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <TIM_Base_SetConfig+0x148>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <TIM_Base_SetConfig+0x14c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a2a      	ldr	r2, [pc, #168]	; (8003ad8 <TIM_Base_SetConfig+0x150>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d003      	beq.n	8003a3a <TIM_Base_SetConfig+0xb2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a29      	ldr	r2, [pc, #164]	; (8003adc <TIM_Base_SetConfig+0x154>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d108      	bne.n	8003a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <TIM_Base_SetConfig+0x12c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_Base_SetConfig+0xf8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <TIM_Base_SetConfig+0x13c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d103      	bne.n	8003a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d105      	bne.n	8003aa6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f023 0201 	bic.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	611a      	str	r2, [r3, #16]
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800
 8003ad4:	40001800 	.word	0x40001800
 8003ad8:	40001c00 	.word	0x40001c00
 8003adc:	40002000 	.word	0x40002000

08003ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 030a 	bic.w	r3, r3, #10
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b087      	sub	sp, #28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f023 0210 	bic.w	r2, r3, #16
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	031b      	lsls	r3, r3, #12
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f043 0307 	orr.w	r3, r3, #7
 8003bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	021a      	lsls	r2, r3, #8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	609a      	str	r2, [r3, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e05a      	b.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d022      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d01d      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d018      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a18      	ldr	r2, [pc, #96]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40010400 	.word	0x40010400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40001800 	.word	0x40001800

08003d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e042      	b.n	8003dcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fd f99c 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	; 0x24
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fc85 	bl	8004688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b0ba      	sub	sp, #232	; 0xe8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_UART_IRQHandler+0x66>
 8003e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fb69 	bl	800450a <UART_Receive_IT>
      return;
 8003e38:	e25b      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80de 	beq.w	8004000 <HAL_UART_IRQHandler+0x22c>
 8003e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80d1 	beq.w	8004000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_UART_IRQHandler+0xae>
 8003e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xd2>
 8003e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	f043 0202 	orr.w	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_UART_IRQHandler+0xf6>
 8003eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	f043 0204 	orr.w	r2, r3, #4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d011      	beq.n	8003efa <HAL_UART_IRQHandler+0x126>
 8003ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f043 0208 	orr.w	r2, r3, #8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 81f2 	beq.w	80042e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_UART_IRQHandler+0x14e>
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 faf4 	bl	800450a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <HAL_UART_IRQHandler+0x17a>
 8003f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04f      	beq.n	8003fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f9fc 	bl	800434c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d141      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3314      	adds	r3, #20
 8003f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1d9      	bne.n	8003f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d013      	beq.n	8003fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	4a7e      	ldr	r2, [pc, #504]	; (80041b4 <HAL_UART_IRQHandler+0x3e0>)
 8003fbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd fef1 	bl	8001daa <HAL_DMA_Abort_IT>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	e00e      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f99e 	bl	8004320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	e00a      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f99a 	bl	8004320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	e006      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f996 	bl	8004320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ffa:	e175      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	bf00      	nop
    return;
 8003ffe:	e173      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 814f 	bne.w	80042a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8148 	beq.w	80042a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8141 	beq.w	80042a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	f040 80b6 	bne.w	80041b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8145 	beq.w	80042ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800406a:	429a      	cmp	r2, r3
 800406c:	f080 813e 	bcs.w	80042ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004076:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004082:	f000 8088 	beq.w	8004196 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800409c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1d9      	bne.n	8004086 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e1      	bne.n	80040d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800411e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004132:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e3      	bne.n	800410e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004166:	f023 0310 	bic.w	r3, r3, #16
 800416a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004178:	65ba      	str	r2, [r7, #88]	; 0x58
 800417a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800417e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e3      	bne.n	8004154 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	4618      	mov	r0, r3
 8004192:	f7fd fd9a 	bl	8001cca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8c1 	bl	8004334 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041b2:	e09b      	b.n	80042ec <HAL_UART_IRQHandler+0x518>
 80041b4:	08004413 	.word	0x08004413
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 808e 	beq.w	80042f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8089 	beq.w	80042f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004202:	647a      	str	r2, [r7, #68]	; 0x44
 8004204:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e3      	bne.n	80041de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3314      	adds	r3, #20
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	623b      	str	r3, [r7, #32]
   return(result);
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800423a:	633a      	str	r2, [r7, #48]	; 0x30
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e3      	bne.n	8004216 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60fb      	str	r3, [r7, #12]
   return(result);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004280:	61fa      	str	r2, [r7, #28]
 8004282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	69b9      	ldr	r1, [r7, #24]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	617b      	str	r3, [r7, #20]
   return(result);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e3      	bne.n	800425c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800429a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f847 	bl	8004334 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042a6:	e023      	b.n	80042f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_UART_IRQHandler+0x4f4>
 80042b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8ba 	bl	800443a <UART_Transmit_IT>
    return;
 80042c6:	e014      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00e      	beq.n	80042f2 <HAL_UART_IRQHandler+0x51e>
 80042d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f8fa 	bl	80044da <UART_EndTransmit_IT>
    return;
 80042e6:	e004      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80042e8:	bf00      	nop
 80042ea:	e002      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80042ec:	bf00      	nop
 80042ee:	e000      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80042f0:	bf00      	nop
  }
}
 80042f2:	37e8      	adds	r7, #232	; 0xe8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b095      	sub	sp, #84	; 0x54
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800436a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004374:	643a      	str	r2, [r7, #64]	; 0x40
 8004376:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800437a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3314      	adds	r3, #20
 800438e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	61fb      	str	r3, [r7, #28]
   return(result);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	64bb      	str	r3, [r7, #72]	; 0x48
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d119      	bne.n	80043f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f023 0310 	bic.w	r3, r3, #16
 80043da:	647b      	str	r3, [r7, #68]	; 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043e4:	61ba      	str	r2, [r7, #24]
 80043e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	613b      	str	r3, [r7, #16]
   return(result);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e5      	bne.n	80043c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004406:	bf00      	nop
 8004408:	3754      	adds	r7, #84	; 0x54
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff ff77 	bl	8004320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b21      	cmp	r3, #33	; 0x21
 800444c:	d13e      	bne.n	80044cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004456:	d114      	bne.n	8004482 <UART_Transmit_IT+0x48>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d110      	bne.n	8004482 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004474:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	1c9a      	adds	r2, r3, #2
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	621a      	str	r2, [r3, #32]
 8004480:	e008      	b.n	8004494 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	1c59      	adds	r1, r3, #1
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6211      	str	r1, [r2, #32]
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29b      	uxth	r3, r3
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4619      	mov	r1, r3
 80044a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10f      	bne.n	80044c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fefc 	bl	80042f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b08c      	sub	sp, #48	; 0x30
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b22      	cmp	r3, #34	; 0x22
 800451c:	f040 80ae 	bne.w	800467c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004528:	d117      	bne.n	800455a <UART_Receive_IT+0x50>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d113      	bne.n	800455a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004548:	b29a      	uxth	r2, r3
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	1c9a      	adds	r2, r3, #2
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
 8004558:	e026      	b.n	80045a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456c:	d007      	beq.n	800457e <UART_Receive_IT+0x74>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <UART_Receive_IT+0x82>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e008      	b.n	800459e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004598:	b2da      	uxtb	r2, r3
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4619      	mov	r1, r3
 80045b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d15d      	bne.n	8004678 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0220 	bic.w	r2, r2, #32
 80045ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0201 	bic.w	r2, r2, #1
 80045ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d135      	bne.n	800466e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	613b      	str	r3, [r7, #16]
   return(result);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f023 0310 	bic.w	r3, r3, #16
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	623a      	str	r2, [r7, #32]
 800462a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	69f9      	ldr	r1, [r7, #28]
 800462e:	6a3a      	ldr	r2, [r7, #32]
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	61bb      	str	r3, [r7, #24]
   return(result);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e5      	bne.n	8004608 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b10      	cmp	r3, #16
 8004648:	d10a      	bne.n	8004660 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fe64 	bl	8004334 <HAL_UARTEx_RxEventCallback>
 800466c:	e002      	b.n	8004674 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff fe4c 	bl	800430c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e002      	b.n	800467e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	3730      	adds	r7, #48	; 0x30
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800468c:	b0c0      	sub	sp, #256	; 0x100
 800468e:	af00      	add	r7, sp, #0
 8004690:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	68d9      	ldr	r1, [r3, #12]
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	ea40 0301 	orr.w	r3, r0, r1
 80046b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	431a      	orrs	r2, r3
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046e0:	f021 010c 	bic.w	r1, r1, #12
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046ee:	430b      	orrs	r3, r1
 80046f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	6999      	ldr	r1, [r3, #24]
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	ea40 0301 	orr.w	r3, r0, r1
 800470e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b8f      	ldr	r3, [pc, #572]	; (8004954 <UART_SetConfig+0x2cc>)
 8004718:	429a      	cmp	r2, r3
 800471a:	d005      	beq.n	8004728 <UART_SetConfig+0xa0>
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b8d      	ldr	r3, [pc, #564]	; (8004958 <UART_SetConfig+0x2d0>)
 8004724:	429a      	cmp	r2, r3
 8004726:	d104      	bne.n	8004732 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7fe f982 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 800472c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004730:	e003      	b.n	800473a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004732:	f7fe f969 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8004736:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004744:	f040 810c 	bne.w	8004960 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474c:	2200      	movs	r2, #0
 800474e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004752:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004756:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800475a:	4622      	mov	r2, r4
 800475c:	462b      	mov	r3, r5
 800475e:	1891      	adds	r1, r2, r2
 8004760:	65b9      	str	r1, [r7, #88]	; 0x58
 8004762:	415b      	adcs	r3, r3
 8004764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004766:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800476a:	4621      	mov	r1, r4
 800476c:	eb12 0801 	adds.w	r8, r2, r1
 8004770:	4629      	mov	r1, r5
 8004772:	eb43 0901 	adc.w	r9, r3, r1
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800478a:	4690      	mov	r8, r2
 800478c:	4699      	mov	r9, r3
 800478e:	4623      	mov	r3, r4
 8004790:	eb18 0303 	adds.w	r3, r8, r3
 8004794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004798:	462b      	mov	r3, r5
 800479a:	eb49 0303 	adc.w	r3, r9, r3
 800479e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047b6:	460b      	mov	r3, r1
 80047b8:	18db      	adds	r3, r3, r3
 80047ba:	653b      	str	r3, [r7, #80]	; 0x50
 80047bc:	4613      	mov	r3, r2
 80047be:	eb42 0303 	adc.w	r3, r2, r3
 80047c2:	657b      	str	r3, [r7, #84]	; 0x54
 80047c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047cc:	f7fb fd50 	bl	8000270 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4b61      	ldr	r3, [pc, #388]	; (800495c <UART_SetConfig+0x2d4>)
 80047d6:	fba3 2302 	umull	r2, r3, r3, r2
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	011c      	lsls	r4, r3, #4
 80047de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047f0:	4642      	mov	r2, r8
 80047f2:	464b      	mov	r3, r9
 80047f4:	1891      	adds	r1, r2, r2
 80047f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80047f8:	415b      	adcs	r3, r3
 80047fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004800:	4641      	mov	r1, r8
 8004802:	eb12 0a01 	adds.w	sl, r2, r1
 8004806:	4649      	mov	r1, r9
 8004808:	eb43 0b01 	adc.w	fp, r3, r1
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004818:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800481c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004820:	4692      	mov	sl, r2
 8004822:	469b      	mov	fp, r3
 8004824:	4643      	mov	r3, r8
 8004826:	eb1a 0303 	adds.w	r3, sl, r3
 800482a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800482e:	464b      	mov	r3, r9
 8004830:	eb4b 0303 	adc.w	r3, fp, r3
 8004834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004844:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004848:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800484c:	460b      	mov	r3, r1
 800484e:	18db      	adds	r3, r3, r3
 8004850:	643b      	str	r3, [r7, #64]	; 0x40
 8004852:	4613      	mov	r3, r2
 8004854:	eb42 0303 	adc.w	r3, r2, r3
 8004858:	647b      	str	r3, [r7, #68]	; 0x44
 800485a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800485e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004862:	f7fb fd05 	bl	8000270 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4611      	mov	r1, r2
 800486c:	4b3b      	ldr	r3, [pc, #236]	; (800495c <UART_SetConfig+0x2d4>)
 800486e:	fba3 2301 	umull	r2, r3, r3, r1
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2264      	movs	r2, #100	; 0x64
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	1acb      	subs	r3, r1, r3
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004882:	4b36      	ldr	r3, [pc, #216]	; (800495c <UART_SetConfig+0x2d4>)
 8004884:	fba3 2302 	umull	r2, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004890:	441c      	add	r4, r3
 8004892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004896:	2200      	movs	r2, #0
 8004898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800489c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048a4:	4642      	mov	r2, r8
 80048a6:	464b      	mov	r3, r9
 80048a8:	1891      	adds	r1, r2, r2
 80048aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80048ac:	415b      	adcs	r3, r3
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048b4:	4641      	mov	r1, r8
 80048b6:	1851      	adds	r1, r2, r1
 80048b8:	6339      	str	r1, [r7, #48]	; 0x30
 80048ba:	4649      	mov	r1, r9
 80048bc:	414b      	adcs	r3, r1
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048cc:	4659      	mov	r1, fp
 80048ce:	00cb      	lsls	r3, r1, #3
 80048d0:	4651      	mov	r1, sl
 80048d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048d6:	4651      	mov	r1, sl
 80048d8:	00ca      	lsls	r2, r1, #3
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	4642      	mov	r2, r8
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048e8:	464b      	mov	r3, r9
 80048ea:	460a      	mov	r2, r1
 80048ec:	eb42 0303 	adc.w	r3, r2, r3
 80048f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004900:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004904:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004908:	460b      	mov	r3, r1
 800490a:	18db      	adds	r3, r3, r3
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
 800490e:	4613      	mov	r3, r2
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800491a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800491e:	f7fb fca7 	bl	8000270 <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <UART_SetConfig+0x2d4>)
 8004928:	fba3 1302 	umull	r1, r3, r3, r2
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	2164      	movs	r1, #100	; 0x64
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	3332      	adds	r3, #50	; 0x32
 800493a:	4a08      	ldr	r2, [pc, #32]	; (800495c <UART_SetConfig+0x2d4>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f003 0207 	and.w	r2, r3, #7
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4422      	add	r2, r4
 800494e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004950:	e106      	b.n	8004b60 <UART_SetConfig+0x4d8>
 8004952:	bf00      	nop
 8004954:	40011000 	.word	0x40011000
 8004958:	40011400 	.word	0x40011400
 800495c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004964:	2200      	movs	r2, #0
 8004966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800496a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800496e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004972:	4642      	mov	r2, r8
 8004974:	464b      	mov	r3, r9
 8004976:	1891      	adds	r1, r2, r2
 8004978:	6239      	str	r1, [r7, #32]
 800497a:	415b      	adcs	r3, r3
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
 800497e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004982:	4641      	mov	r1, r8
 8004984:	1854      	adds	r4, r2, r1
 8004986:	4649      	mov	r1, r9
 8004988:	eb43 0501 	adc.w	r5, r3, r1
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	00eb      	lsls	r3, r5, #3
 8004996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800499a:	00e2      	lsls	r2, r4, #3
 800499c:	4614      	mov	r4, r2
 800499e:	461d      	mov	r5, r3
 80049a0:	4643      	mov	r3, r8
 80049a2:	18e3      	adds	r3, r4, r3
 80049a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049a8:	464b      	mov	r3, r9
 80049aa:	eb45 0303 	adc.w	r3, r5, r3
 80049ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049ce:	4629      	mov	r1, r5
 80049d0:	008b      	lsls	r3, r1, #2
 80049d2:	4621      	mov	r1, r4
 80049d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d8:	4621      	mov	r1, r4
 80049da:	008a      	lsls	r2, r1, #2
 80049dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049e0:	f7fb fc46 	bl	8000270 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4b60      	ldr	r3, [pc, #384]	; (8004b6c <UART_SetConfig+0x4e4>)
 80049ea:	fba3 2302 	umull	r2, r3, r3, r2
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	011c      	lsls	r4, r3, #4
 80049f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a04:	4642      	mov	r2, r8
 8004a06:	464b      	mov	r3, r9
 8004a08:	1891      	adds	r1, r2, r2
 8004a0a:	61b9      	str	r1, [r7, #24]
 8004a0c:	415b      	adcs	r3, r3
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a14:	4641      	mov	r1, r8
 8004a16:	1851      	adds	r1, r2, r1
 8004a18:	6139      	str	r1, [r7, #16]
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	414b      	adcs	r3, r1
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	00cb      	lsls	r3, r1, #3
 8004a30:	4651      	mov	r1, sl
 8004a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a36:	4651      	mov	r1, sl
 8004a38:	00ca      	lsls	r2, r1, #3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4642      	mov	r2, r8
 8004a42:	189b      	adds	r3, r3, r2
 8004a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a48:	464b      	mov	r3, r9
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	008b      	lsls	r3, r1, #2
 8004a70:	4641      	mov	r1, r8
 8004a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a76:	4641      	mov	r1, r8
 8004a78:	008a      	lsls	r2, r1, #2
 8004a7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a7e:	f7fb fbf7 	bl	8000270 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	4b38      	ldr	r3, [pc, #224]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2264      	movs	r2, #100	; 0x64
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	1acb      	subs	r3, r1, r3
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	3332      	adds	r3, #50	; 0x32
 8004a9c:	4a33      	ldr	r2, [pc, #204]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa8:	441c      	add	r4, r3
 8004aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aae:	2200      	movs	r2, #0
 8004ab0:	673b      	str	r3, [r7, #112]	; 0x70
 8004ab2:	677a      	str	r2, [r7, #116]	; 0x74
 8004ab4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	1891      	adds	r1, r2, r2
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	415b      	adcs	r3, r3
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ac8:	4641      	mov	r1, r8
 8004aca:	1851      	adds	r1, r2, r1
 8004acc:	6039      	str	r1, [r7, #0]
 8004ace:	4649      	mov	r1, r9
 8004ad0:	414b      	adcs	r3, r1
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	00cb      	lsls	r3, r1, #3
 8004ae4:	4651      	mov	r1, sl
 8004ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aea:	4651      	mov	r1, sl
 8004aec:	00ca      	lsls	r2, r1, #3
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	4642      	mov	r2, r8
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004afa:	464b      	mov	r3, r9
 8004afc:	460a      	mov	r2, r1
 8004afe:	eb42 0303 	adc.w	r3, r2, r3
 8004b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0e:	667a      	str	r2, [r7, #100]	; 0x64
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	008b      	lsls	r3, r1, #2
 8004b20:	4641      	mov	r1, r8
 8004b22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b26:	4641      	mov	r1, r8
 8004b28:	008a      	lsls	r2, r1, #2
 8004b2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b2e:	f7fb fb9f 	bl	8000270 <__aeabi_uldivmod>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004b38:	fba3 1302 	umull	r1, r3, r3, r2
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	2164      	movs	r1, #100	; 0x64
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	3332      	adds	r3, #50	; 0x32
 8004b4a:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	f003 020f 	and.w	r2, r3, #15
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4422      	add	r2, r4
 8004b5e:	609a      	str	r2, [r3, #8]
}
 8004b60:	bf00      	nop
 8004b62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b66:	46bd      	mov	sp, r7
 8004b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6c:	51eb851f 	.word	0x51eb851f

08004b70 <std>:
 8004b70:	2300      	movs	r3, #0
 8004b72:	b510      	push	{r4, lr}
 8004b74:	4604      	mov	r4, r0
 8004b76:	e9c0 3300 	strd	r3, r3, [r0]
 8004b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b7e:	6083      	str	r3, [r0, #8]
 8004b80:	8181      	strh	r1, [r0, #12]
 8004b82:	6643      	str	r3, [r0, #100]	; 0x64
 8004b84:	81c2      	strh	r2, [r0, #14]
 8004b86:	6183      	str	r3, [r0, #24]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	305c      	adds	r0, #92	; 0x5c
 8004b8e:	f000 f9f7 	bl	8004f80 <memset>
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <std+0x58>)
 8004b94:	6263      	str	r3, [r4, #36]	; 0x24
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <std+0x5c>)
 8004b98:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <std+0x60>)
 8004b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <std+0x64>)
 8004ba0:	6323      	str	r3, [r4, #48]	; 0x30
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <std+0x68>)
 8004ba4:	6224      	str	r4, [r4, #32]
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d006      	beq.n	8004bb8 <std+0x48>
 8004baa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004bae:	4294      	cmp	r4, r2
 8004bb0:	d002      	beq.n	8004bb8 <std+0x48>
 8004bb2:	33d0      	adds	r3, #208	; 0xd0
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	d105      	bne.n	8004bc4 <std+0x54>
 8004bb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc0:	f000 ba56 	b.w	8005070 <__retarget_lock_init_recursive>
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	bf00      	nop
 8004bc8:	08004dd1 	.word	0x08004dd1
 8004bcc:	08004df3 	.word	0x08004df3
 8004bd0:	08004e2b 	.word	0x08004e2b
 8004bd4:	08004e4f 	.word	0x08004e4f
 8004bd8:	200004a8 	.word	0x200004a8

08004bdc <stdio_exit_handler>:
 8004bdc:	4a02      	ldr	r2, [pc, #8]	; (8004be8 <stdio_exit_handler+0xc>)
 8004bde:	4903      	ldr	r1, [pc, #12]	; (8004bec <stdio_exit_handler+0x10>)
 8004be0:	4803      	ldr	r0, [pc, #12]	; (8004bf0 <stdio_exit_handler+0x14>)
 8004be2:	f000 b869 	b.w	8004cb8 <_fwalk_sglue>
 8004be6:	bf00      	nop
 8004be8:	20000010 	.word	0x20000010
 8004bec:	08005939 	.word	0x08005939
 8004bf0:	2000001c 	.word	0x2000001c

08004bf4 <cleanup_stdio>:
 8004bf4:	6841      	ldr	r1, [r0, #4]
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <cleanup_stdio+0x34>)
 8004bf8:	4299      	cmp	r1, r3
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	d001      	beq.n	8004c04 <cleanup_stdio+0x10>
 8004c00:	f000 fe9a 	bl	8005938 <_fflush_r>
 8004c04:	68a1      	ldr	r1, [r4, #8]
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <cleanup_stdio+0x38>)
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	d002      	beq.n	8004c12 <cleanup_stdio+0x1e>
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f000 fe93 	bl	8005938 <_fflush_r>
 8004c12:	68e1      	ldr	r1, [r4, #12]
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <cleanup_stdio+0x3c>)
 8004c16:	4299      	cmp	r1, r3
 8004c18:	d004      	beq.n	8004c24 <cleanup_stdio+0x30>
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c20:	f000 be8a 	b.w	8005938 <_fflush_r>
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	bf00      	nop
 8004c28:	200004a8 	.word	0x200004a8
 8004c2c:	20000510 	.word	0x20000510
 8004c30:	20000578 	.word	0x20000578

08004c34 <global_stdio_init.part.0>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <global_stdio_init.part.0+0x30>)
 8004c38:	4c0b      	ldr	r4, [pc, #44]	; (8004c68 <global_stdio_init.part.0+0x34>)
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <global_stdio_init.part.0+0x38>)
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	2200      	movs	r2, #0
 8004c42:	2104      	movs	r1, #4
 8004c44:	f7ff ff94 	bl	8004b70 <std>
 8004c48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	2109      	movs	r1, #9
 8004c50:	f7ff ff8e 	bl	8004b70 <std>
 8004c54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c58:	2202      	movs	r2, #2
 8004c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c5e:	2112      	movs	r1, #18
 8004c60:	f7ff bf86 	b.w	8004b70 <std>
 8004c64:	200005e0 	.word	0x200005e0
 8004c68:	200004a8 	.word	0x200004a8
 8004c6c:	08004bdd 	.word	0x08004bdd

08004c70 <__sfp_lock_acquire>:
 8004c70:	4801      	ldr	r0, [pc, #4]	; (8004c78 <__sfp_lock_acquire+0x8>)
 8004c72:	f000 b9fe 	b.w	8005072 <__retarget_lock_acquire_recursive>
 8004c76:	bf00      	nop
 8004c78:	200005e9 	.word	0x200005e9

08004c7c <__sfp_lock_release>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	; (8004c84 <__sfp_lock_release+0x8>)
 8004c7e:	f000 b9f9 	b.w	8005074 <__retarget_lock_release_recursive>
 8004c82:	bf00      	nop
 8004c84:	200005e9 	.word	0x200005e9

08004c88 <__sinit>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	f7ff fff0 	bl	8004c70 <__sfp_lock_acquire>
 8004c90:	6a23      	ldr	r3, [r4, #32]
 8004c92:	b11b      	cbz	r3, 8004c9c <__sinit+0x14>
 8004c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c98:	f7ff bff0 	b.w	8004c7c <__sfp_lock_release>
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <__sinit+0x28>)
 8004c9e:	6223      	str	r3, [r4, #32]
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <__sinit+0x2c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f5      	bne.n	8004c94 <__sinit+0xc>
 8004ca8:	f7ff ffc4 	bl	8004c34 <global_stdio_init.part.0>
 8004cac:	e7f2      	b.n	8004c94 <__sinit+0xc>
 8004cae:	bf00      	nop
 8004cb0:	08004bf5 	.word	0x08004bf5
 8004cb4:	200005e0 	.word	0x200005e0

08004cb8 <_fwalk_sglue>:
 8004cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	4688      	mov	r8, r1
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cc8:	f1b9 0901 	subs.w	r9, r9, #1
 8004ccc:	d505      	bpl.n	8004cda <_fwalk_sglue+0x22>
 8004cce:	6824      	ldr	r4, [r4, #0]
 8004cd0:	2c00      	cmp	r4, #0
 8004cd2:	d1f7      	bne.n	8004cc4 <_fwalk_sglue+0xc>
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cda:	89ab      	ldrh	r3, [r5, #12]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d907      	bls.n	8004cf0 <_fwalk_sglue+0x38>
 8004ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	d003      	beq.n	8004cf0 <_fwalk_sglue+0x38>
 8004ce8:	4629      	mov	r1, r5
 8004cea:	4638      	mov	r0, r7
 8004cec:	47c0      	blx	r8
 8004cee:	4306      	orrs	r6, r0
 8004cf0:	3568      	adds	r5, #104	; 0x68
 8004cf2:	e7e9      	b.n	8004cc8 <_fwalk_sglue+0x10>

08004cf4 <iprintf>:
 8004cf4:	b40f      	push	{r0, r1, r2, r3}
 8004cf6:	b507      	push	{r0, r1, r2, lr}
 8004cf8:	4906      	ldr	r1, [pc, #24]	; (8004d14 <iprintf+0x20>)
 8004cfa:	ab04      	add	r3, sp, #16
 8004cfc:	6808      	ldr	r0, [r1, #0]
 8004cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d02:	6881      	ldr	r1, [r0, #8]
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	f000 fae7 	bl	80052d8 <_vfiprintf_r>
 8004d0a:	b003      	add	sp, #12
 8004d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d10:	b004      	add	sp, #16
 8004d12:	4770      	bx	lr
 8004d14:	20000068 	.word	0x20000068

08004d18 <_puts_r>:
 8004d18:	6a03      	ldr	r3, [r0, #32]
 8004d1a:	b570      	push	{r4, r5, r6, lr}
 8004d1c:	6884      	ldr	r4, [r0, #8]
 8004d1e:	4605      	mov	r5, r0
 8004d20:	460e      	mov	r6, r1
 8004d22:	b90b      	cbnz	r3, 8004d28 <_puts_r+0x10>
 8004d24:	f7ff ffb0 	bl	8004c88 <__sinit>
 8004d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d2a:	07db      	lsls	r3, r3, #31
 8004d2c:	d405      	bmi.n	8004d3a <_puts_r+0x22>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	0598      	lsls	r0, r3, #22
 8004d32:	d402      	bmi.n	8004d3a <_puts_r+0x22>
 8004d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d36:	f000 f99c 	bl	8005072 <__retarget_lock_acquire_recursive>
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	0719      	lsls	r1, r3, #28
 8004d3e:	d513      	bpl.n	8004d68 <_puts_r+0x50>
 8004d40:	6923      	ldr	r3, [r4, #16]
 8004d42:	b18b      	cbz	r3, 8004d68 <_puts_r+0x50>
 8004d44:	3e01      	subs	r6, #1
 8004d46:	68a3      	ldr	r3, [r4, #8]
 8004d48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	60a3      	str	r3, [r4, #8]
 8004d50:	b9e9      	cbnz	r1, 8004d8e <_puts_r+0x76>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da2e      	bge.n	8004db4 <_puts_r+0x9c>
 8004d56:	4622      	mov	r2, r4
 8004d58:	210a      	movs	r1, #10
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 f87b 	bl	8004e56 <__swbuf_r>
 8004d60:	3001      	adds	r0, #1
 8004d62:	d007      	beq.n	8004d74 <_puts_r+0x5c>
 8004d64:	250a      	movs	r5, #10
 8004d66:	e007      	b.n	8004d78 <_puts_r+0x60>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 f8b0 	bl	8004ed0 <__swsetup_r>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d0e7      	beq.n	8004d44 <_puts_r+0x2c>
 8004d74:	f04f 35ff 	mov.w	r5, #4294967295
 8004d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d7a:	07da      	lsls	r2, r3, #31
 8004d7c:	d405      	bmi.n	8004d8a <_puts_r+0x72>
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	059b      	lsls	r3, r3, #22
 8004d82:	d402      	bmi.n	8004d8a <_puts_r+0x72>
 8004d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d86:	f000 f975 	bl	8005074 <__retarget_lock_release_recursive>
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	bd70      	pop	{r4, r5, r6, pc}
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	da04      	bge.n	8004d9c <_puts_r+0x84>
 8004d92:	69a2      	ldr	r2, [r4, #24]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	dc06      	bgt.n	8004da6 <_puts_r+0x8e>
 8004d98:	290a      	cmp	r1, #10
 8004d9a:	d004      	beq.n	8004da6 <_puts_r+0x8e>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	6022      	str	r2, [r4, #0]
 8004da2:	7019      	strb	r1, [r3, #0]
 8004da4:	e7cf      	b.n	8004d46 <_puts_r+0x2e>
 8004da6:	4622      	mov	r2, r4
 8004da8:	4628      	mov	r0, r5
 8004daa:	f000 f854 	bl	8004e56 <__swbuf_r>
 8004dae:	3001      	adds	r0, #1
 8004db0:	d1c9      	bne.n	8004d46 <_puts_r+0x2e>
 8004db2:	e7df      	b.n	8004d74 <_puts_r+0x5c>
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	250a      	movs	r5, #10
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	6022      	str	r2, [r4, #0]
 8004dbc:	701d      	strb	r5, [r3, #0]
 8004dbe:	e7db      	b.n	8004d78 <_puts_r+0x60>

08004dc0 <puts>:
 8004dc0:	4b02      	ldr	r3, [pc, #8]	; (8004dcc <puts+0xc>)
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	f7ff bfa7 	b.w	8004d18 <_puts_r>
 8004dca:	bf00      	nop
 8004dcc:	20000068 	.word	0x20000068

08004dd0 <__sread>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd8:	f000 f8fc 	bl	8004fd4 <_read_r>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	bfab      	itete	ge
 8004de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004de2:	89a3      	ldrhlt	r3, [r4, #12]
 8004de4:	181b      	addge	r3, r3, r0
 8004de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dea:	bfac      	ite	ge
 8004dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dee:	81a3      	strhlt	r3, [r4, #12]
 8004df0:	bd10      	pop	{r4, pc}

08004df2 <__swrite>:
 8004df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df6:	461f      	mov	r7, r3
 8004df8:	898b      	ldrh	r3, [r1, #12]
 8004dfa:	05db      	lsls	r3, r3, #23
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	4616      	mov	r6, r2
 8004e02:	d505      	bpl.n	8004e10 <__swrite+0x1e>
 8004e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e08:	2302      	movs	r3, #2
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f000 f8d0 	bl	8004fb0 <_lseek_r>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	4632      	mov	r2, r6
 8004e1e:	463b      	mov	r3, r7
 8004e20:	4628      	mov	r0, r5
 8004e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e26:	f000 b8e7 	b.w	8004ff8 <_write_r>

08004e2a <__sseek>:
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e32:	f000 f8bd 	bl	8004fb0 <_lseek_r>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	bf15      	itete	ne
 8004e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e46:	81a3      	strheq	r3, [r4, #12]
 8004e48:	bf18      	it	ne
 8004e4a:	81a3      	strhne	r3, [r4, #12]
 8004e4c:	bd10      	pop	{r4, pc}

08004e4e <__sclose>:
 8004e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e52:	f000 b89d 	b.w	8004f90 <_close_r>

08004e56 <__swbuf_r>:
 8004e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e58:	460e      	mov	r6, r1
 8004e5a:	4614      	mov	r4, r2
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	b118      	cbz	r0, 8004e68 <__swbuf_r+0x12>
 8004e60:	6a03      	ldr	r3, [r0, #32]
 8004e62:	b90b      	cbnz	r3, 8004e68 <__swbuf_r+0x12>
 8004e64:	f7ff ff10 	bl	8004c88 <__sinit>
 8004e68:	69a3      	ldr	r3, [r4, #24]
 8004e6a:	60a3      	str	r3, [r4, #8]
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	071a      	lsls	r2, r3, #28
 8004e70:	d525      	bpl.n	8004ebe <__swbuf_r+0x68>
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	b31b      	cbz	r3, 8004ebe <__swbuf_r+0x68>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	6922      	ldr	r2, [r4, #16]
 8004e7a:	1a98      	subs	r0, r3, r2
 8004e7c:	6963      	ldr	r3, [r4, #20]
 8004e7e:	b2f6      	uxtb	r6, r6
 8004e80:	4283      	cmp	r3, r0
 8004e82:	4637      	mov	r7, r6
 8004e84:	dc04      	bgt.n	8004e90 <__swbuf_r+0x3a>
 8004e86:	4621      	mov	r1, r4
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f000 fd55 	bl	8005938 <_fflush_r>
 8004e8e:	b9e0      	cbnz	r0, 8004eca <__swbuf_r+0x74>
 8004e90:	68a3      	ldr	r3, [r4, #8]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	60a3      	str	r3, [r4, #8]
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	6022      	str	r2, [r4, #0]
 8004e9c:	701e      	strb	r6, [r3, #0]
 8004e9e:	6962      	ldr	r2, [r4, #20]
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d004      	beq.n	8004eb0 <__swbuf_r+0x5a>
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	07db      	lsls	r3, r3, #31
 8004eaa:	d506      	bpl.n	8004eba <__swbuf_r+0x64>
 8004eac:	2e0a      	cmp	r6, #10
 8004eae:	d104      	bne.n	8004eba <__swbuf_r+0x64>
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 fd40 	bl	8005938 <_fflush_r>
 8004eb8:	b938      	cbnz	r0, 8004eca <__swbuf_r+0x74>
 8004eba:	4638      	mov	r0, r7
 8004ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f000 f805 	bl	8004ed0 <__swsetup_r>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d0d5      	beq.n	8004e76 <__swbuf_r+0x20>
 8004eca:	f04f 37ff 	mov.w	r7, #4294967295
 8004ece:	e7f4      	b.n	8004eba <__swbuf_r+0x64>

08004ed0 <__swsetup_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <__swsetup_r+0xac>)
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	460c      	mov	r4, r1
 8004eda:	b118      	cbz	r0, 8004ee4 <__swsetup_r+0x14>
 8004edc:	6a03      	ldr	r3, [r0, #32]
 8004ede:	b90b      	cbnz	r3, 8004ee4 <__swsetup_r+0x14>
 8004ee0:	f7ff fed2 	bl	8004c88 <__sinit>
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004eea:	0718      	lsls	r0, r3, #28
 8004eec:	d422      	bmi.n	8004f34 <__swsetup_r+0x64>
 8004eee:	06d9      	lsls	r1, r3, #27
 8004ef0:	d407      	bmi.n	8004f02 <__swsetup_r+0x32>
 8004ef2:	2309      	movs	r3, #9
 8004ef4:	602b      	str	r3, [r5, #0]
 8004ef6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	e034      	b.n	8004f6c <__swsetup_r+0x9c>
 8004f02:	0758      	lsls	r0, r3, #29
 8004f04:	d512      	bpl.n	8004f2c <__swsetup_r+0x5c>
 8004f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f08:	b141      	cbz	r1, 8004f1c <__swsetup_r+0x4c>
 8004f0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f0e:	4299      	cmp	r1, r3
 8004f10:	d002      	beq.n	8004f18 <__swsetup_r+0x48>
 8004f12:	4628      	mov	r0, r5
 8004f14:	f000 f8be 	bl	8005094 <_free_r>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	6363      	str	r3, [r4, #52]	; 0x34
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	2300      	movs	r3, #0
 8004f26:	6063      	str	r3, [r4, #4]
 8004f28:	6923      	ldr	r3, [r4, #16]
 8004f2a:	6023      	str	r3, [r4, #0]
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	f043 0308 	orr.w	r3, r3, #8
 8004f32:	81a3      	strh	r3, [r4, #12]
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	b94b      	cbnz	r3, 8004f4c <__swsetup_r+0x7c>
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f42:	d003      	beq.n	8004f4c <__swsetup_r+0x7c>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 fd44 	bl	80059d4 <__smakebuf_r>
 8004f4c:	89a0      	ldrh	r0, [r4, #12]
 8004f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f52:	f010 0301 	ands.w	r3, r0, #1
 8004f56:	d00a      	beq.n	8004f6e <__swsetup_r+0x9e>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60a3      	str	r3, [r4, #8]
 8004f5c:	6963      	ldr	r3, [r4, #20]
 8004f5e:	425b      	negs	r3, r3
 8004f60:	61a3      	str	r3, [r4, #24]
 8004f62:	6923      	ldr	r3, [r4, #16]
 8004f64:	b943      	cbnz	r3, 8004f78 <__swsetup_r+0xa8>
 8004f66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f6a:	d1c4      	bne.n	8004ef6 <__swsetup_r+0x26>
 8004f6c:	bd38      	pop	{r3, r4, r5, pc}
 8004f6e:	0781      	lsls	r1, r0, #30
 8004f70:	bf58      	it	pl
 8004f72:	6963      	ldrpl	r3, [r4, #20]
 8004f74:	60a3      	str	r3, [r4, #8]
 8004f76:	e7f4      	b.n	8004f62 <__swsetup_r+0x92>
 8004f78:	2000      	movs	r0, #0
 8004f7a:	e7f7      	b.n	8004f6c <__swsetup_r+0x9c>
 8004f7c:	20000068 	.word	0x20000068

08004f80 <memset>:
 8004f80:	4402      	add	r2, r0
 8004f82:	4603      	mov	r3, r0
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d100      	bne.n	8004f8a <memset+0xa>
 8004f88:	4770      	bx	lr
 8004f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8e:	e7f9      	b.n	8004f84 <memset+0x4>

08004f90 <_close_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d06      	ldr	r5, [pc, #24]	; (8004fac <_close_r+0x1c>)
 8004f94:	2300      	movs	r3, #0
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	f7fb fecb 	bl	8000d36 <_close>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_close_r+0x1a>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_close_r+0x1a>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	200005e4 	.word	0x200005e4

08004fb0 <_lseek_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d07      	ldr	r5, [pc, #28]	; (8004fd0 <_lseek_r+0x20>)
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	4608      	mov	r0, r1
 8004fb8:	4611      	mov	r1, r2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	602a      	str	r2, [r5, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f7fb fee0 	bl	8000d84 <_lseek>
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	d102      	bne.n	8004fce <_lseek_r+0x1e>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	b103      	cbz	r3, 8004fce <_lseek_r+0x1e>
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	200005e4 	.word	0x200005e4

08004fd4 <_read_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4d07      	ldr	r5, [pc, #28]	; (8004ff4 <_read_r+0x20>)
 8004fd8:	4604      	mov	r4, r0
 8004fda:	4608      	mov	r0, r1
 8004fdc:	4611      	mov	r1, r2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	602a      	str	r2, [r5, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f7fb fe6e 	bl	8000cc4 <_read>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_read_r+0x1e>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_read_r+0x1e>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	200005e4 	.word	0x200005e4

08004ff8 <_write_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4d07      	ldr	r5, [pc, #28]	; (8005018 <_write_r+0x20>)
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	4608      	mov	r0, r1
 8005000:	4611      	mov	r1, r2
 8005002:	2200      	movs	r2, #0
 8005004:	602a      	str	r2, [r5, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	f7fb fe79 	bl	8000cfe <_write>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_write_r+0x1e>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_write_r+0x1e>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	200005e4 	.word	0x200005e4

0800501c <__errno>:
 800501c:	4b01      	ldr	r3, [pc, #4]	; (8005024 <__errno+0x8>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000068 	.word	0x20000068

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	4d0d      	ldr	r5, [pc, #52]	; (8005060 <__libc_init_array+0x38>)
 800502c:	4c0d      	ldr	r4, [pc, #52]	; (8005064 <__libc_init_array+0x3c>)
 800502e:	1b64      	subs	r4, r4, r5
 8005030:	10a4      	asrs	r4, r4, #2
 8005032:	2600      	movs	r6, #0
 8005034:	42a6      	cmp	r6, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	4d0b      	ldr	r5, [pc, #44]	; (8005068 <__libc_init_array+0x40>)
 800503a:	4c0c      	ldr	r4, [pc, #48]	; (800506c <__libc_init_array+0x44>)
 800503c:	f000 fd38 	bl	8005ab0 <_init>
 8005040:	1b64      	subs	r4, r4, r5
 8005042:	10a4      	asrs	r4, r4, #2
 8005044:	2600      	movs	r6, #0
 8005046:	42a6      	cmp	r6, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005050:	4798      	blx	r3
 8005052:	3601      	adds	r6, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f855 3b04 	ldr.w	r3, [r5], #4
 800505a:	4798      	blx	r3
 800505c:	3601      	adds	r6, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	080061b8 	.word	0x080061b8
 8005064:	080061b8 	.word	0x080061b8
 8005068:	080061b8 	.word	0x080061b8
 800506c:	080061bc 	.word	0x080061bc

08005070 <__retarget_lock_init_recursive>:
 8005070:	4770      	bx	lr

08005072 <__retarget_lock_acquire_recursive>:
 8005072:	4770      	bx	lr

08005074 <__retarget_lock_release_recursive>:
 8005074:	4770      	bx	lr

08005076 <memcpy>:
 8005076:	440a      	add	r2, r1
 8005078:	4291      	cmp	r1, r2
 800507a:	f100 33ff 	add.w	r3, r0, #4294967295
 800507e:	d100      	bne.n	8005082 <memcpy+0xc>
 8005080:	4770      	bx	lr
 8005082:	b510      	push	{r4, lr}
 8005084:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800508c:	4291      	cmp	r1, r2
 800508e:	d1f9      	bne.n	8005084 <memcpy+0xe>
 8005090:	bd10      	pop	{r4, pc}
	...

08005094 <_free_r>:
 8005094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005096:	2900      	cmp	r1, #0
 8005098:	d044      	beq.n	8005124 <_free_r+0x90>
 800509a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800509e:	9001      	str	r0, [sp, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f1a1 0404 	sub.w	r4, r1, #4
 80050a6:	bfb8      	it	lt
 80050a8:	18e4      	addlt	r4, r4, r3
 80050aa:	f000 f8df 	bl	800526c <__malloc_lock>
 80050ae:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <_free_r+0x94>)
 80050b0:	9801      	ldr	r0, [sp, #4]
 80050b2:	6813      	ldr	r3, [r2, #0]
 80050b4:	b933      	cbnz	r3, 80050c4 <_free_r+0x30>
 80050b6:	6063      	str	r3, [r4, #4]
 80050b8:	6014      	str	r4, [r2, #0]
 80050ba:	b003      	add	sp, #12
 80050bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c0:	f000 b8da 	b.w	8005278 <__malloc_unlock>
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	d908      	bls.n	80050da <_free_r+0x46>
 80050c8:	6825      	ldr	r5, [r4, #0]
 80050ca:	1961      	adds	r1, r4, r5
 80050cc:	428b      	cmp	r3, r1
 80050ce:	bf01      	itttt	eq
 80050d0:	6819      	ldreq	r1, [r3, #0]
 80050d2:	685b      	ldreq	r3, [r3, #4]
 80050d4:	1949      	addeq	r1, r1, r5
 80050d6:	6021      	streq	r1, [r4, #0]
 80050d8:	e7ed      	b.n	80050b6 <_free_r+0x22>
 80050da:	461a      	mov	r2, r3
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	b10b      	cbz	r3, 80050e4 <_free_r+0x50>
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	d9fa      	bls.n	80050da <_free_r+0x46>
 80050e4:	6811      	ldr	r1, [r2, #0]
 80050e6:	1855      	adds	r5, r2, r1
 80050e8:	42a5      	cmp	r5, r4
 80050ea:	d10b      	bne.n	8005104 <_free_r+0x70>
 80050ec:	6824      	ldr	r4, [r4, #0]
 80050ee:	4421      	add	r1, r4
 80050f0:	1854      	adds	r4, r2, r1
 80050f2:	42a3      	cmp	r3, r4
 80050f4:	6011      	str	r1, [r2, #0]
 80050f6:	d1e0      	bne.n	80050ba <_free_r+0x26>
 80050f8:	681c      	ldr	r4, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	6053      	str	r3, [r2, #4]
 80050fe:	440c      	add	r4, r1
 8005100:	6014      	str	r4, [r2, #0]
 8005102:	e7da      	b.n	80050ba <_free_r+0x26>
 8005104:	d902      	bls.n	800510c <_free_r+0x78>
 8005106:	230c      	movs	r3, #12
 8005108:	6003      	str	r3, [r0, #0]
 800510a:	e7d6      	b.n	80050ba <_free_r+0x26>
 800510c:	6825      	ldr	r5, [r4, #0]
 800510e:	1961      	adds	r1, r4, r5
 8005110:	428b      	cmp	r3, r1
 8005112:	bf04      	itt	eq
 8005114:	6819      	ldreq	r1, [r3, #0]
 8005116:	685b      	ldreq	r3, [r3, #4]
 8005118:	6063      	str	r3, [r4, #4]
 800511a:	bf04      	itt	eq
 800511c:	1949      	addeq	r1, r1, r5
 800511e:	6021      	streq	r1, [r4, #0]
 8005120:	6054      	str	r4, [r2, #4]
 8005122:	e7ca      	b.n	80050ba <_free_r+0x26>
 8005124:	b003      	add	sp, #12
 8005126:	bd30      	pop	{r4, r5, pc}
 8005128:	200005ec 	.word	0x200005ec

0800512c <sbrk_aligned>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	4e0e      	ldr	r6, [pc, #56]	; (8005168 <sbrk_aligned+0x3c>)
 8005130:	460c      	mov	r4, r1
 8005132:	6831      	ldr	r1, [r6, #0]
 8005134:	4605      	mov	r5, r0
 8005136:	b911      	cbnz	r1, 800513e <sbrk_aligned+0x12>
 8005138:	f000 fcaa 	bl	8005a90 <_sbrk_r>
 800513c:	6030      	str	r0, [r6, #0]
 800513e:	4621      	mov	r1, r4
 8005140:	4628      	mov	r0, r5
 8005142:	f000 fca5 	bl	8005a90 <_sbrk_r>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d00a      	beq.n	8005160 <sbrk_aligned+0x34>
 800514a:	1cc4      	adds	r4, r0, #3
 800514c:	f024 0403 	bic.w	r4, r4, #3
 8005150:	42a0      	cmp	r0, r4
 8005152:	d007      	beq.n	8005164 <sbrk_aligned+0x38>
 8005154:	1a21      	subs	r1, r4, r0
 8005156:	4628      	mov	r0, r5
 8005158:	f000 fc9a 	bl	8005a90 <_sbrk_r>
 800515c:	3001      	adds	r0, #1
 800515e:	d101      	bne.n	8005164 <sbrk_aligned+0x38>
 8005160:	f04f 34ff 	mov.w	r4, #4294967295
 8005164:	4620      	mov	r0, r4
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	200005f0 	.word	0x200005f0

0800516c <_malloc_r>:
 800516c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005170:	1ccd      	adds	r5, r1, #3
 8005172:	f025 0503 	bic.w	r5, r5, #3
 8005176:	3508      	adds	r5, #8
 8005178:	2d0c      	cmp	r5, #12
 800517a:	bf38      	it	cc
 800517c:	250c      	movcc	r5, #12
 800517e:	2d00      	cmp	r5, #0
 8005180:	4607      	mov	r7, r0
 8005182:	db01      	blt.n	8005188 <_malloc_r+0x1c>
 8005184:	42a9      	cmp	r1, r5
 8005186:	d905      	bls.n	8005194 <_malloc_r+0x28>
 8005188:	230c      	movs	r3, #12
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	2600      	movs	r6, #0
 800518e:	4630      	mov	r0, r6
 8005190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005194:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005268 <_malloc_r+0xfc>
 8005198:	f000 f868 	bl	800526c <__malloc_lock>
 800519c:	f8d8 3000 	ldr.w	r3, [r8]
 80051a0:	461c      	mov	r4, r3
 80051a2:	bb5c      	cbnz	r4, 80051fc <_malloc_r+0x90>
 80051a4:	4629      	mov	r1, r5
 80051a6:	4638      	mov	r0, r7
 80051a8:	f7ff ffc0 	bl	800512c <sbrk_aligned>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	4604      	mov	r4, r0
 80051b0:	d155      	bne.n	800525e <_malloc_r+0xf2>
 80051b2:	f8d8 4000 	ldr.w	r4, [r8]
 80051b6:	4626      	mov	r6, r4
 80051b8:	2e00      	cmp	r6, #0
 80051ba:	d145      	bne.n	8005248 <_malloc_r+0xdc>
 80051bc:	2c00      	cmp	r4, #0
 80051be:	d048      	beq.n	8005252 <_malloc_r+0xe6>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	4631      	mov	r1, r6
 80051c4:	4638      	mov	r0, r7
 80051c6:	eb04 0903 	add.w	r9, r4, r3
 80051ca:	f000 fc61 	bl	8005a90 <_sbrk_r>
 80051ce:	4581      	cmp	r9, r0
 80051d0:	d13f      	bne.n	8005252 <_malloc_r+0xe6>
 80051d2:	6821      	ldr	r1, [r4, #0]
 80051d4:	1a6d      	subs	r5, r5, r1
 80051d6:	4629      	mov	r1, r5
 80051d8:	4638      	mov	r0, r7
 80051da:	f7ff ffa7 	bl	800512c <sbrk_aligned>
 80051de:	3001      	adds	r0, #1
 80051e0:	d037      	beq.n	8005252 <_malloc_r+0xe6>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	442b      	add	r3, r5
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	f8d8 3000 	ldr.w	r3, [r8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d038      	beq.n	8005262 <_malloc_r+0xf6>
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	42a2      	cmp	r2, r4
 80051f4:	d12b      	bne.n	800524e <_malloc_r+0xe2>
 80051f6:	2200      	movs	r2, #0
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	e00f      	b.n	800521c <_malloc_r+0xb0>
 80051fc:	6822      	ldr	r2, [r4, #0]
 80051fe:	1b52      	subs	r2, r2, r5
 8005200:	d41f      	bmi.n	8005242 <_malloc_r+0xd6>
 8005202:	2a0b      	cmp	r2, #11
 8005204:	d917      	bls.n	8005236 <_malloc_r+0xca>
 8005206:	1961      	adds	r1, r4, r5
 8005208:	42a3      	cmp	r3, r4
 800520a:	6025      	str	r5, [r4, #0]
 800520c:	bf18      	it	ne
 800520e:	6059      	strne	r1, [r3, #4]
 8005210:	6863      	ldr	r3, [r4, #4]
 8005212:	bf08      	it	eq
 8005214:	f8c8 1000 	streq.w	r1, [r8]
 8005218:	5162      	str	r2, [r4, r5]
 800521a:	604b      	str	r3, [r1, #4]
 800521c:	4638      	mov	r0, r7
 800521e:	f104 060b 	add.w	r6, r4, #11
 8005222:	f000 f829 	bl	8005278 <__malloc_unlock>
 8005226:	f026 0607 	bic.w	r6, r6, #7
 800522a:	1d23      	adds	r3, r4, #4
 800522c:	1af2      	subs	r2, r6, r3
 800522e:	d0ae      	beq.n	800518e <_malloc_r+0x22>
 8005230:	1b9b      	subs	r3, r3, r6
 8005232:	50a3      	str	r3, [r4, r2]
 8005234:	e7ab      	b.n	800518e <_malloc_r+0x22>
 8005236:	42a3      	cmp	r3, r4
 8005238:	6862      	ldr	r2, [r4, #4]
 800523a:	d1dd      	bne.n	80051f8 <_malloc_r+0x8c>
 800523c:	f8c8 2000 	str.w	r2, [r8]
 8005240:	e7ec      	b.n	800521c <_malloc_r+0xb0>
 8005242:	4623      	mov	r3, r4
 8005244:	6864      	ldr	r4, [r4, #4]
 8005246:	e7ac      	b.n	80051a2 <_malloc_r+0x36>
 8005248:	4634      	mov	r4, r6
 800524a:	6876      	ldr	r6, [r6, #4]
 800524c:	e7b4      	b.n	80051b8 <_malloc_r+0x4c>
 800524e:	4613      	mov	r3, r2
 8005250:	e7cc      	b.n	80051ec <_malloc_r+0x80>
 8005252:	230c      	movs	r3, #12
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	4638      	mov	r0, r7
 8005258:	f000 f80e 	bl	8005278 <__malloc_unlock>
 800525c:	e797      	b.n	800518e <_malloc_r+0x22>
 800525e:	6025      	str	r5, [r4, #0]
 8005260:	e7dc      	b.n	800521c <_malloc_r+0xb0>
 8005262:	605b      	str	r3, [r3, #4]
 8005264:	deff      	udf	#255	; 0xff
 8005266:	bf00      	nop
 8005268:	200005ec 	.word	0x200005ec

0800526c <__malloc_lock>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__malloc_lock+0x8>)
 800526e:	f7ff bf00 	b.w	8005072 <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	200005e8 	.word	0x200005e8

08005278 <__malloc_unlock>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__malloc_unlock+0x8>)
 800527a:	f7ff befb 	b.w	8005074 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	200005e8 	.word	0x200005e8

08005284 <__sfputc_r>:
 8005284:	6893      	ldr	r3, [r2, #8]
 8005286:	3b01      	subs	r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	b410      	push	{r4}
 800528c:	6093      	str	r3, [r2, #8]
 800528e:	da08      	bge.n	80052a2 <__sfputc_r+0x1e>
 8005290:	6994      	ldr	r4, [r2, #24]
 8005292:	42a3      	cmp	r3, r4
 8005294:	db01      	blt.n	800529a <__sfputc_r+0x16>
 8005296:	290a      	cmp	r1, #10
 8005298:	d103      	bne.n	80052a2 <__sfputc_r+0x1e>
 800529a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800529e:	f7ff bdda 	b.w	8004e56 <__swbuf_r>
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	1c58      	adds	r0, r3, #1
 80052a6:	6010      	str	r0, [r2, #0]
 80052a8:	7019      	strb	r1, [r3, #0]
 80052aa:	4608      	mov	r0, r1
 80052ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <__sfputs_r>:
 80052b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b4:	4606      	mov	r6, r0
 80052b6:	460f      	mov	r7, r1
 80052b8:	4614      	mov	r4, r2
 80052ba:	18d5      	adds	r5, r2, r3
 80052bc:	42ac      	cmp	r4, r5
 80052be:	d101      	bne.n	80052c4 <__sfputs_r+0x12>
 80052c0:	2000      	movs	r0, #0
 80052c2:	e007      	b.n	80052d4 <__sfputs_r+0x22>
 80052c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c8:	463a      	mov	r2, r7
 80052ca:	4630      	mov	r0, r6
 80052cc:	f7ff ffda 	bl	8005284 <__sfputc_r>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d1f3      	bne.n	80052bc <__sfputs_r+0xa>
 80052d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052d8 <_vfiprintf_r>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	460d      	mov	r5, r1
 80052de:	b09d      	sub	sp, #116	; 0x74
 80052e0:	4614      	mov	r4, r2
 80052e2:	4698      	mov	r8, r3
 80052e4:	4606      	mov	r6, r0
 80052e6:	b118      	cbz	r0, 80052f0 <_vfiprintf_r+0x18>
 80052e8:	6a03      	ldr	r3, [r0, #32]
 80052ea:	b90b      	cbnz	r3, 80052f0 <_vfiprintf_r+0x18>
 80052ec:	f7ff fccc 	bl	8004c88 <__sinit>
 80052f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052f2:	07d9      	lsls	r1, r3, #31
 80052f4:	d405      	bmi.n	8005302 <_vfiprintf_r+0x2a>
 80052f6:	89ab      	ldrh	r3, [r5, #12]
 80052f8:	059a      	lsls	r2, r3, #22
 80052fa:	d402      	bmi.n	8005302 <_vfiprintf_r+0x2a>
 80052fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052fe:	f7ff feb8 	bl	8005072 <__retarget_lock_acquire_recursive>
 8005302:	89ab      	ldrh	r3, [r5, #12]
 8005304:	071b      	lsls	r3, r3, #28
 8005306:	d501      	bpl.n	800530c <_vfiprintf_r+0x34>
 8005308:	692b      	ldr	r3, [r5, #16]
 800530a:	b99b      	cbnz	r3, 8005334 <_vfiprintf_r+0x5c>
 800530c:	4629      	mov	r1, r5
 800530e:	4630      	mov	r0, r6
 8005310:	f7ff fdde 	bl	8004ed0 <__swsetup_r>
 8005314:	b170      	cbz	r0, 8005334 <_vfiprintf_r+0x5c>
 8005316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005318:	07dc      	lsls	r4, r3, #31
 800531a:	d504      	bpl.n	8005326 <_vfiprintf_r+0x4e>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	b01d      	add	sp, #116	; 0x74
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	0598      	lsls	r0, r3, #22
 800532a:	d4f7      	bmi.n	800531c <_vfiprintf_r+0x44>
 800532c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800532e:	f7ff fea1 	bl	8005074 <__retarget_lock_release_recursive>
 8005332:	e7f3      	b.n	800531c <_vfiprintf_r+0x44>
 8005334:	2300      	movs	r3, #0
 8005336:	9309      	str	r3, [sp, #36]	; 0x24
 8005338:	2320      	movs	r3, #32
 800533a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800533e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005342:	2330      	movs	r3, #48	; 0x30
 8005344:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80054f8 <_vfiprintf_r+0x220>
 8005348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800534c:	f04f 0901 	mov.w	r9, #1
 8005350:	4623      	mov	r3, r4
 8005352:	469a      	mov	sl, r3
 8005354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005358:	b10a      	cbz	r2, 800535e <_vfiprintf_r+0x86>
 800535a:	2a25      	cmp	r2, #37	; 0x25
 800535c:	d1f9      	bne.n	8005352 <_vfiprintf_r+0x7a>
 800535e:	ebba 0b04 	subs.w	fp, sl, r4
 8005362:	d00b      	beq.n	800537c <_vfiprintf_r+0xa4>
 8005364:	465b      	mov	r3, fp
 8005366:	4622      	mov	r2, r4
 8005368:	4629      	mov	r1, r5
 800536a:	4630      	mov	r0, r6
 800536c:	f7ff ffa1 	bl	80052b2 <__sfputs_r>
 8005370:	3001      	adds	r0, #1
 8005372:	f000 80a9 	beq.w	80054c8 <_vfiprintf_r+0x1f0>
 8005376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005378:	445a      	add	r2, fp
 800537a:	9209      	str	r2, [sp, #36]	; 0x24
 800537c:	f89a 3000 	ldrb.w	r3, [sl]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80a1 	beq.w	80054c8 <_vfiprintf_r+0x1f0>
 8005386:	2300      	movs	r3, #0
 8005388:	f04f 32ff 	mov.w	r2, #4294967295
 800538c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005390:	f10a 0a01 	add.w	sl, sl, #1
 8005394:	9304      	str	r3, [sp, #16]
 8005396:	9307      	str	r3, [sp, #28]
 8005398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800539c:	931a      	str	r3, [sp, #104]	; 0x68
 800539e:	4654      	mov	r4, sl
 80053a0:	2205      	movs	r2, #5
 80053a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a6:	4854      	ldr	r0, [pc, #336]	; (80054f8 <_vfiprintf_r+0x220>)
 80053a8:	f7fa ff12 	bl	80001d0 <memchr>
 80053ac:	9a04      	ldr	r2, [sp, #16]
 80053ae:	b9d8      	cbnz	r0, 80053e8 <_vfiprintf_r+0x110>
 80053b0:	06d1      	lsls	r1, r2, #27
 80053b2:	bf44      	itt	mi
 80053b4:	2320      	movmi	r3, #32
 80053b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ba:	0713      	lsls	r3, r2, #28
 80053bc:	bf44      	itt	mi
 80053be:	232b      	movmi	r3, #43	; 0x2b
 80053c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053c4:	f89a 3000 	ldrb.w	r3, [sl]
 80053c8:	2b2a      	cmp	r3, #42	; 0x2a
 80053ca:	d015      	beq.n	80053f8 <_vfiprintf_r+0x120>
 80053cc:	9a07      	ldr	r2, [sp, #28]
 80053ce:	4654      	mov	r4, sl
 80053d0:	2000      	movs	r0, #0
 80053d2:	f04f 0c0a 	mov.w	ip, #10
 80053d6:	4621      	mov	r1, r4
 80053d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053dc:	3b30      	subs	r3, #48	; 0x30
 80053de:	2b09      	cmp	r3, #9
 80053e0:	d94d      	bls.n	800547e <_vfiprintf_r+0x1a6>
 80053e2:	b1b0      	cbz	r0, 8005412 <_vfiprintf_r+0x13a>
 80053e4:	9207      	str	r2, [sp, #28]
 80053e6:	e014      	b.n	8005412 <_vfiprintf_r+0x13a>
 80053e8:	eba0 0308 	sub.w	r3, r0, r8
 80053ec:	fa09 f303 	lsl.w	r3, r9, r3
 80053f0:	4313      	orrs	r3, r2
 80053f2:	9304      	str	r3, [sp, #16]
 80053f4:	46a2      	mov	sl, r4
 80053f6:	e7d2      	b.n	800539e <_vfiprintf_r+0xc6>
 80053f8:	9b03      	ldr	r3, [sp, #12]
 80053fa:	1d19      	adds	r1, r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	9103      	str	r1, [sp, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	bfbb      	ittet	lt
 8005404:	425b      	neglt	r3, r3
 8005406:	f042 0202 	orrlt.w	r2, r2, #2
 800540a:	9307      	strge	r3, [sp, #28]
 800540c:	9307      	strlt	r3, [sp, #28]
 800540e:	bfb8      	it	lt
 8005410:	9204      	strlt	r2, [sp, #16]
 8005412:	7823      	ldrb	r3, [r4, #0]
 8005414:	2b2e      	cmp	r3, #46	; 0x2e
 8005416:	d10c      	bne.n	8005432 <_vfiprintf_r+0x15a>
 8005418:	7863      	ldrb	r3, [r4, #1]
 800541a:	2b2a      	cmp	r3, #42	; 0x2a
 800541c:	d134      	bne.n	8005488 <_vfiprintf_r+0x1b0>
 800541e:	9b03      	ldr	r3, [sp, #12]
 8005420:	1d1a      	adds	r2, r3, #4
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	9203      	str	r2, [sp, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	bfb8      	it	lt
 800542a:	f04f 33ff 	movlt.w	r3, #4294967295
 800542e:	3402      	adds	r4, #2
 8005430:	9305      	str	r3, [sp, #20]
 8005432:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005508 <_vfiprintf_r+0x230>
 8005436:	7821      	ldrb	r1, [r4, #0]
 8005438:	2203      	movs	r2, #3
 800543a:	4650      	mov	r0, sl
 800543c:	f7fa fec8 	bl	80001d0 <memchr>
 8005440:	b138      	cbz	r0, 8005452 <_vfiprintf_r+0x17a>
 8005442:	9b04      	ldr	r3, [sp, #16]
 8005444:	eba0 000a 	sub.w	r0, r0, sl
 8005448:	2240      	movs	r2, #64	; 0x40
 800544a:	4082      	lsls	r2, r0
 800544c:	4313      	orrs	r3, r2
 800544e:	3401      	adds	r4, #1
 8005450:	9304      	str	r3, [sp, #16]
 8005452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005456:	4829      	ldr	r0, [pc, #164]	; (80054fc <_vfiprintf_r+0x224>)
 8005458:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800545c:	2206      	movs	r2, #6
 800545e:	f7fa feb7 	bl	80001d0 <memchr>
 8005462:	2800      	cmp	r0, #0
 8005464:	d03f      	beq.n	80054e6 <_vfiprintf_r+0x20e>
 8005466:	4b26      	ldr	r3, [pc, #152]	; (8005500 <_vfiprintf_r+0x228>)
 8005468:	bb1b      	cbnz	r3, 80054b2 <_vfiprintf_r+0x1da>
 800546a:	9b03      	ldr	r3, [sp, #12]
 800546c:	3307      	adds	r3, #7
 800546e:	f023 0307 	bic.w	r3, r3, #7
 8005472:	3308      	adds	r3, #8
 8005474:	9303      	str	r3, [sp, #12]
 8005476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005478:	443b      	add	r3, r7
 800547a:	9309      	str	r3, [sp, #36]	; 0x24
 800547c:	e768      	b.n	8005350 <_vfiprintf_r+0x78>
 800547e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005482:	460c      	mov	r4, r1
 8005484:	2001      	movs	r0, #1
 8005486:	e7a6      	b.n	80053d6 <_vfiprintf_r+0xfe>
 8005488:	2300      	movs	r3, #0
 800548a:	3401      	adds	r4, #1
 800548c:	9305      	str	r3, [sp, #20]
 800548e:	4619      	mov	r1, r3
 8005490:	f04f 0c0a 	mov.w	ip, #10
 8005494:	4620      	mov	r0, r4
 8005496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800549a:	3a30      	subs	r2, #48	; 0x30
 800549c:	2a09      	cmp	r2, #9
 800549e:	d903      	bls.n	80054a8 <_vfiprintf_r+0x1d0>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0c6      	beq.n	8005432 <_vfiprintf_r+0x15a>
 80054a4:	9105      	str	r1, [sp, #20]
 80054a6:	e7c4      	b.n	8005432 <_vfiprintf_r+0x15a>
 80054a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054ac:	4604      	mov	r4, r0
 80054ae:	2301      	movs	r3, #1
 80054b0:	e7f0      	b.n	8005494 <_vfiprintf_r+0x1bc>
 80054b2:	ab03      	add	r3, sp, #12
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	462a      	mov	r2, r5
 80054b8:	4b12      	ldr	r3, [pc, #72]	; (8005504 <_vfiprintf_r+0x22c>)
 80054ba:	a904      	add	r1, sp, #16
 80054bc:	4630      	mov	r0, r6
 80054be:	f3af 8000 	nop.w
 80054c2:	4607      	mov	r7, r0
 80054c4:	1c78      	adds	r0, r7, #1
 80054c6:	d1d6      	bne.n	8005476 <_vfiprintf_r+0x19e>
 80054c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054ca:	07d9      	lsls	r1, r3, #31
 80054cc:	d405      	bmi.n	80054da <_vfiprintf_r+0x202>
 80054ce:	89ab      	ldrh	r3, [r5, #12]
 80054d0:	059a      	lsls	r2, r3, #22
 80054d2:	d402      	bmi.n	80054da <_vfiprintf_r+0x202>
 80054d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054d6:	f7ff fdcd 	bl	8005074 <__retarget_lock_release_recursive>
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	065b      	lsls	r3, r3, #25
 80054de:	f53f af1d 	bmi.w	800531c <_vfiprintf_r+0x44>
 80054e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054e4:	e71c      	b.n	8005320 <_vfiprintf_r+0x48>
 80054e6:	ab03      	add	r3, sp, #12
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	462a      	mov	r2, r5
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <_vfiprintf_r+0x22c>)
 80054ee:	a904      	add	r1, sp, #16
 80054f0:	4630      	mov	r0, r6
 80054f2:	f000 f879 	bl	80055e8 <_printf_i>
 80054f6:	e7e4      	b.n	80054c2 <_vfiprintf_r+0x1ea>
 80054f8:	0800617c 	.word	0x0800617c
 80054fc:	08006186 	.word	0x08006186
 8005500:	00000000 	.word	0x00000000
 8005504:	080052b3 	.word	0x080052b3
 8005508:	08006182 	.word	0x08006182

0800550c <_printf_common>:
 800550c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005510:	4616      	mov	r6, r2
 8005512:	4699      	mov	r9, r3
 8005514:	688a      	ldr	r2, [r1, #8]
 8005516:	690b      	ldr	r3, [r1, #16]
 8005518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800551c:	4293      	cmp	r3, r2
 800551e:	bfb8      	it	lt
 8005520:	4613      	movlt	r3, r2
 8005522:	6033      	str	r3, [r6, #0]
 8005524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005528:	4607      	mov	r7, r0
 800552a:	460c      	mov	r4, r1
 800552c:	b10a      	cbz	r2, 8005532 <_printf_common+0x26>
 800552e:	3301      	adds	r3, #1
 8005530:	6033      	str	r3, [r6, #0]
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	0699      	lsls	r1, r3, #26
 8005536:	bf42      	ittt	mi
 8005538:	6833      	ldrmi	r3, [r6, #0]
 800553a:	3302      	addmi	r3, #2
 800553c:	6033      	strmi	r3, [r6, #0]
 800553e:	6825      	ldr	r5, [r4, #0]
 8005540:	f015 0506 	ands.w	r5, r5, #6
 8005544:	d106      	bne.n	8005554 <_printf_common+0x48>
 8005546:	f104 0a19 	add.w	sl, r4, #25
 800554a:	68e3      	ldr	r3, [r4, #12]
 800554c:	6832      	ldr	r2, [r6, #0]
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	42ab      	cmp	r3, r5
 8005552:	dc26      	bgt.n	80055a2 <_printf_common+0x96>
 8005554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005558:	1e13      	subs	r3, r2, #0
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	bf18      	it	ne
 800555e:	2301      	movne	r3, #1
 8005560:	0692      	lsls	r2, r2, #26
 8005562:	d42b      	bmi.n	80055bc <_printf_common+0xb0>
 8005564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005568:	4649      	mov	r1, r9
 800556a:	4638      	mov	r0, r7
 800556c:	47c0      	blx	r8
 800556e:	3001      	adds	r0, #1
 8005570:	d01e      	beq.n	80055b0 <_printf_common+0xa4>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	6922      	ldr	r2, [r4, #16]
 8005576:	f003 0306 	and.w	r3, r3, #6
 800557a:	2b04      	cmp	r3, #4
 800557c:	bf02      	ittt	eq
 800557e:	68e5      	ldreq	r5, [r4, #12]
 8005580:	6833      	ldreq	r3, [r6, #0]
 8005582:	1aed      	subeq	r5, r5, r3
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	bf0c      	ite	eq
 8005588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800558c:	2500      	movne	r5, #0
 800558e:	4293      	cmp	r3, r2
 8005590:	bfc4      	itt	gt
 8005592:	1a9b      	subgt	r3, r3, r2
 8005594:	18ed      	addgt	r5, r5, r3
 8005596:	2600      	movs	r6, #0
 8005598:	341a      	adds	r4, #26
 800559a:	42b5      	cmp	r5, r6
 800559c:	d11a      	bne.n	80055d4 <_printf_common+0xc8>
 800559e:	2000      	movs	r0, #0
 80055a0:	e008      	b.n	80055b4 <_printf_common+0xa8>
 80055a2:	2301      	movs	r3, #1
 80055a4:	4652      	mov	r2, sl
 80055a6:	4649      	mov	r1, r9
 80055a8:	4638      	mov	r0, r7
 80055aa:	47c0      	blx	r8
 80055ac:	3001      	adds	r0, #1
 80055ae:	d103      	bne.n	80055b8 <_printf_common+0xac>
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b8:	3501      	adds	r5, #1
 80055ba:	e7c6      	b.n	800554a <_printf_common+0x3e>
 80055bc:	18e1      	adds	r1, r4, r3
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	2030      	movs	r0, #48	; 0x30
 80055c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055c6:	4422      	add	r2, r4
 80055c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055d0:	3302      	adds	r3, #2
 80055d2:	e7c7      	b.n	8005564 <_printf_common+0x58>
 80055d4:	2301      	movs	r3, #1
 80055d6:	4622      	mov	r2, r4
 80055d8:	4649      	mov	r1, r9
 80055da:	4638      	mov	r0, r7
 80055dc:	47c0      	blx	r8
 80055de:	3001      	adds	r0, #1
 80055e0:	d0e6      	beq.n	80055b0 <_printf_common+0xa4>
 80055e2:	3601      	adds	r6, #1
 80055e4:	e7d9      	b.n	800559a <_printf_common+0x8e>
	...

080055e8 <_printf_i>:
 80055e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	7e0f      	ldrb	r7, [r1, #24]
 80055ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055f0:	2f78      	cmp	r7, #120	; 0x78
 80055f2:	4691      	mov	r9, r2
 80055f4:	4680      	mov	r8, r0
 80055f6:	460c      	mov	r4, r1
 80055f8:	469a      	mov	sl, r3
 80055fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055fe:	d807      	bhi.n	8005610 <_printf_i+0x28>
 8005600:	2f62      	cmp	r7, #98	; 0x62
 8005602:	d80a      	bhi.n	800561a <_printf_i+0x32>
 8005604:	2f00      	cmp	r7, #0
 8005606:	f000 80d4 	beq.w	80057b2 <_printf_i+0x1ca>
 800560a:	2f58      	cmp	r7, #88	; 0x58
 800560c:	f000 80c0 	beq.w	8005790 <_printf_i+0x1a8>
 8005610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005618:	e03a      	b.n	8005690 <_printf_i+0xa8>
 800561a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800561e:	2b15      	cmp	r3, #21
 8005620:	d8f6      	bhi.n	8005610 <_printf_i+0x28>
 8005622:	a101      	add	r1, pc, #4	; (adr r1, 8005628 <_printf_i+0x40>)
 8005624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005628:	08005681 	.word	0x08005681
 800562c:	08005695 	.word	0x08005695
 8005630:	08005611 	.word	0x08005611
 8005634:	08005611 	.word	0x08005611
 8005638:	08005611 	.word	0x08005611
 800563c:	08005611 	.word	0x08005611
 8005640:	08005695 	.word	0x08005695
 8005644:	08005611 	.word	0x08005611
 8005648:	08005611 	.word	0x08005611
 800564c:	08005611 	.word	0x08005611
 8005650:	08005611 	.word	0x08005611
 8005654:	08005799 	.word	0x08005799
 8005658:	080056c1 	.word	0x080056c1
 800565c:	08005753 	.word	0x08005753
 8005660:	08005611 	.word	0x08005611
 8005664:	08005611 	.word	0x08005611
 8005668:	080057bb 	.word	0x080057bb
 800566c:	08005611 	.word	0x08005611
 8005670:	080056c1 	.word	0x080056c1
 8005674:	08005611 	.word	0x08005611
 8005678:	08005611 	.word	0x08005611
 800567c:	0800575b 	.word	0x0800575b
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	1d1a      	adds	r2, r3, #4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	602a      	str	r2, [r5, #0]
 8005688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800568c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005690:	2301      	movs	r3, #1
 8005692:	e09f      	b.n	80057d4 <_printf_i+0x1ec>
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	682b      	ldr	r3, [r5, #0]
 8005698:	0607      	lsls	r7, r0, #24
 800569a:	f103 0104 	add.w	r1, r3, #4
 800569e:	6029      	str	r1, [r5, #0]
 80056a0:	d501      	bpl.n	80056a6 <_printf_i+0xbe>
 80056a2:	681e      	ldr	r6, [r3, #0]
 80056a4:	e003      	b.n	80056ae <_printf_i+0xc6>
 80056a6:	0646      	lsls	r6, r0, #25
 80056a8:	d5fb      	bpl.n	80056a2 <_printf_i+0xba>
 80056aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056ae:	2e00      	cmp	r6, #0
 80056b0:	da03      	bge.n	80056ba <_printf_i+0xd2>
 80056b2:	232d      	movs	r3, #45	; 0x2d
 80056b4:	4276      	negs	r6, r6
 80056b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ba:	485a      	ldr	r0, [pc, #360]	; (8005824 <_printf_i+0x23c>)
 80056bc:	230a      	movs	r3, #10
 80056be:	e012      	b.n	80056e6 <_printf_i+0xfe>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	6820      	ldr	r0, [r4, #0]
 80056c4:	1d19      	adds	r1, r3, #4
 80056c6:	6029      	str	r1, [r5, #0]
 80056c8:	0605      	lsls	r5, r0, #24
 80056ca:	d501      	bpl.n	80056d0 <_printf_i+0xe8>
 80056cc:	681e      	ldr	r6, [r3, #0]
 80056ce:	e002      	b.n	80056d6 <_printf_i+0xee>
 80056d0:	0641      	lsls	r1, r0, #25
 80056d2:	d5fb      	bpl.n	80056cc <_printf_i+0xe4>
 80056d4:	881e      	ldrh	r6, [r3, #0]
 80056d6:	4853      	ldr	r0, [pc, #332]	; (8005824 <_printf_i+0x23c>)
 80056d8:	2f6f      	cmp	r7, #111	; 0x6f
 80056da:	bf0c      	ite	eq
 80056dc:	2308      	moveq	r3, #8
 80056de:	230a      	movne	r3, #10
 80056e0:	2100      	movs	r1, #0
 80056e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056e6:	6865      	ldr	r5, [r4, #4]
 80056e8:	60a5      	str	r5, [r4, #8]
 80056ea:	2d00      	cmp	r5, #0
 80056ec:	bfa2      	ittt	ge
 80056ee:	6821      	ldrge	r1, [r4, #0]
 80056f0:	f021 0104 	bicge.w	r1, r1, #4
 80056f4:	6021      	strge	r1, [r4, #0]
 80056f6:	b90e      	cbnz	r6, 80056fc <_printf_i+0x114>
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	d04b      	beq.n	8005794 <_printf_i+0x1ac>
 80056fc:	4615      	mov	r5, r2
 80056fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005702:	fb03 6711 	mls	r7, r3, r1, r6
 8005706:	5dc7      	ldrb	r7, [r0, r7]
 8005708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800570c:	4637      	mov	r7, r6
 800570e:	42bb      	cmp	r3, r7
 8005710:	460e      	mov	r6, r1
 8005712:	d9f4      	bls.n	80056fe <_printf_i+0x116>
 8005714:	2b08      	cmp	r3, #8
 8005716:	d10b      	bne.n	8005730 <_printf_i+0x148>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	07de      	lsls	r6, r3, #31
 800571c:	d508      	bpl.n	8005730 <_printf_i+0x148>
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	6861      	ldr	r1, [r4, #4]
 8005722:	4299      	cmp	r1, r3
 8005724:	bfde      	ittt	le
 8005726:	2330      	movle	r3, #48	; 0x30
 8005728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800572c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005730:	1b52      	subs	r2, r2, r5
 8005732:	6122      	str	r2, [r4, #16]
 8005734:	f8cd a000 	str.w	sl, [sp]
 8005738:	464b      	mov	r3, r9
 800573a:	aa03      	add	r2, sp, #12
 800573c:	4621      	mov	r1, r4
 800573e:	4640      	mov	r0, r8
 8005740:	f7ff fee4 	bl	800550c <_printf_common>
 8005744:	3001      	adds	r0, #1
 8005746:	d14a      	bne.n	80057de <_printf_i+0x1f6>
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	b004      	add	sp, #16
 800574e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	f043 0320 	orr.w	r3, r3, #32
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	4833      	ldr	r0, [pc, #204]	; (8005828 <_printf_i+0x240>)
 800575c:	2778      	movs	r7, #120	; 0x78
 800575e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	6829      	ldr	r1, [r5, #0]
 8005766:	061f      	lsls	r7, r3, #24
 8005768:	f851 6b04 	ldr.w	r6, [r1], #4
 800576c:	d402      	bmi.n	8005774 <_printf_i+0x18c>
 800576e:	065f      	lsls	r7, r3, #25
 8005770:	bf48      	it	mi
 8005772:	b2b6      	uxthmi	r6, r6
 8005774:	07df      	lsls	r7, r3, #31
 8005776:	bf48      	it	mi
 8005778:	f043 0320 	orrmi.w	r3, r3, #32
 800577c:	6029      	str	r1, [r5, #0]
 800577e:	bf48      	it	mi
 8005780:	6023      	strmi	r3, [r4, #0]
 8005782:	b91e      	cbnz	r6, 800578c <_printf_i+0x1a4>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	f023 0320 	bic.w	r3, r3, #32
 800578a:	6023      	str	r3, [r4, #0]
 800578c:	2310      	movs	r3, #16
 800578e:	e7a7      	b.n	80056e0 <_printf_i+0xf8>
 8005790:	4824      	ldr	r0, [pc, #144]	; (8005824 <_printf_i+0x23c>)
 8005792:	e7e4      	b.n	800575e <_printf_i+0x176>
 8005794:	4615      	mov	r5, r2
 8005796:	e7bd      	b.n	8005714 <_printf_i+0x12c>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	6826      	ldr	r6, [r4, #0]
 800579c:	6961      	ldr	r1, [r4, #20]
 800579e:	1d18      	adds	r0, r3, #4
 80057a0:	6028      	str	r0, [r5, #0]
 80057a2:	0635      	lsls	r5, r6, #24
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	d501      	bpl.n	80057ac <_printf_i+0x1c4>
 80057a8:	6019      	str	r1, [r3, #0]
 80057aa:	e002      	b.n	80057b2 <_printf_i+0x1ca>
 80057ac:	0670      	lsls	r0, r6, #25
 80057ae:	d5fb      	bpl.n	80057a8 <_printf_i+0x1c0>
 80057b0:	8019      	strh	r1, [r3, #0]
 80057b2:	2300      	movs	r3, #0
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	4615      	mov	r5, r2
 80057b8:	e7bc      	b.n	8005734 <_printf_i+0x14c>
 80057ba:	682b      	ldr	r3, [r5, #0]
 80057bc:	1d1a      	adds	r2, r3, #4
 80057be:	602a      	str	r2, [r5, #0]
 80057c0:	681d      	ldr	r5, [r3, #0]
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	2100      	movs	r1, #0
 80057c6:	4628      	mov	r0, r5
 80057c8:	f7fa fd02 	bl	80001d0 <memchr>
 80057cc:	b108      	cbz	r0, 80057d2 <_printf_i+0x1ea>
 80057ce:	1b40      	subs	r0, r0, r5
 80057d0:	6060      	str	r0, [r4, #4]
 80057d2:	6863      	ldr	r3, [r4, #4]
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	2300      	movs	r3, #0
 80057d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057dc:	e7aa      	b.n	8005734 <_printf_i+0x14c>
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	462a      	mov	r2, r5
 80057e2:	4649      	mov	r1, r9
 80057e4:	4640      	mov	r0, r8
 80057e6:	47d0      	blx	sl
 80057e8:	3001      	adds	r0, #1
 80057ea:	d0ad      	beq.n	8005748 <_printf_i+0x160>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	079b      	lsls	r3, r3, #30
 80057f0:	d413      	bmi.n	800581a <_printf_i+0x232>
 80057f2:	68e0      	ldr	r0, [r4, #12]
 80057f4:	9b03      	ldr	r3, [sp, #12]
 80057f6:	4298      	cmp	r0, r3
 80057f8:	bfb8      	it	lt
 80057fa:	4618      	movlt	r0, r3
 80057fc:	e7a6      	b.n	800574c <_printf_i+0x164>
 80057fe:	2301      	movs	r3, #1
 8005800:	4632      	mov	r2, r6
 8005802:	4649      	mov	r1, r9
 8005804:	4640      	mov	r0, r8
 8005806:	47d0      	blx	sl
 8005808:	3001      	adds	r0, #1
 800580a:	d09d      	beq.n	8005748 <_printf_i+0x160>
 800580c:	3501      	adds	r5, #1
 800580e:	68e3      	ldr	r3, [r4, #12]
 8005810:	9903      	ldr	r1, [sp, #12]
 8005812:	1a5b      	subs	r3, r3, r1
 8005814:	42ab      	cmp	r3, r5
 8005816:	dcf2      	bgt.n	80057fe <_printf_i+0x216>
 8005818:	e7eb      	b.n	80057f2 <_printf_i+0x20a>
 800581a:	2500      	movs	r5, #0
 800581c:	f104 0619 	add.w	r6, r4, #25
 8005820:	e7f5      	b.n	800580e <_printf_i+0x226>
 8005822:	bf00      	nop
 8005824:	0800618d 	.word	0x0800618d
 8005828:	0800619e 	.word	0x0800619e

0800582c <__sflush_r>:
 800582c:	898a      	ldrh	r2, [r1, #12]
 800582e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005832:	4605      	mov	r5, r0
 8005834:	0710      	lsls	r0, r2, #28
 8005836:	460c      	mov	r4, r1
 8005838:	d458      	bmi.n	80058ec <__sflush_r+0xc0>
 800583a:	684b      	ldr	r3, [r1, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	dc05      	bgt.n	800584c <__sflush_r+0x20>
 8005840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	dc02      	bgt.n	800584c <__sflush_r+0x20>
 8005846:	2000      	movs	r0, #0
 8005848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800584e:	2e00      	cmp	r6, #0
 8005850:	d0f9      	beq.n	8005846 <__sflush_r+0x1a>
 8005852:	2300      	movs	r3, #0
 8005854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005858:	682f      	ldr	r7, [r5, #0]
 800585a:	6a21      	ldr	r1, [r4, #32]
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	d032      	beq.n	80058c6 <__sflush_r+0x9a>
 8005860:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	075a      	lsls	r2, r3, #29
 8005866:	d505      	bpl.n	8005874 <__sflush_r+0x48>
 8005868:	6863      	ldr	r3, [r4, #4]
 800586a:	1ac0      	subs	r0, r0, r3
 800586c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800586e:	b10b      	cbz	r3, 8005874 <__sflush_r+0x48>
 8005870:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005872:	1ac0      	subs	r0, r0, r3
 8005874:	2300      	movs	r3, #0
 8005876:	4602      	mov	r2, r0
 8005878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800587a:	6a21      	ldr	r1, [r4, #32]
 800587c:	4628      	mov	r0, r5
 800587e:	47b0      	blx	r6
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	d106      	bne.n	8005894 <__sflush_r+0x68>
 8005886:	6829      	ldr	r1, [r5, #0]
 8005888:	291d      	cmp	r1, #29
 800588a:	d82b      	bhi.n	80058e4 <__sflush_r+0xb8>
 800588c:	4a29      	ldr	r2, [pc, #164]	; (8005934 <__sflush_r+0x108>)
 800588e:	410a      	asrs	r2, r1
 8005890:	07d6      	lsls	r6, r2, #31
 8005892:	d427      	bmi.n	80058e4 <__sflush_r+0xb8>
 8005894:	2200      	movs	r2, #0
 8005896:	6062      	str	r2, [r4, #4]
 8005898:	04d9      	lsls	r1, r3, #19
 800589a:	6922      	ldr	r2, [r4, #16]
 800589c:	6022      	str	r2, [r4, #0]
 800589e:	d504      	bpl.n	80058aa <__sflush_r+0x7e>
 80058a0:	1c42      	adds	r2, r0, #1
 80058a2:	d101      	bne.n	80058a8 <__sflush_r+0x7c>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	b903      	cbnz	r3, 80058aa <__sflush_r+0x7e>
 80058a8:	6560      	str	r0, [r4, #84]	; 0x54
 80058aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ac:	602f      	str	r7, [r5, #0]
 80058ae:	2900      	cmp	r1, #0
 80058b0:	d0c9      	beq.n	8005846 <__sflush_r+0x1a>
 80058b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b6:	4299      	cmp	r1, r3
 80058b8:	d002      	beq.n	80058c0 <__sflush_r+0x94>
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7ff fbea 	bl	8005094 <_free_r>
 80058c0:	2000      	movs	r0, #0
 80058c2:	6360      	str	r0, [r4, #52]	; 0x34
 80058c4:	e7c0      	b.n	8005848 <__sflush_r+0x1c>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b0      	blx	r6
 80058cc:	1c41      	adds	r1, r0, #1
 80058ce:	d1c8      	bne.n	8005862 <__sflush_r+0x36>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0c5      	beq.n	8005862 <__sflush_r+0x36>
 80058d6:	2b1d      	cmp	r3, #29
 80058d8:	d001      	beq.n	80058de <__sflush_r+0xb2>
 80058da:	2b16      	cmp	r3, #22
 80058dc:	d101      	bne.n	80058e2 <__sflush_r+0xb6>
 80058de:	602f      	str	r7, [r5, #0]
 80058e0:	e7b1      	b.n	8005846 <__sflush_r+0x1a>
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	e7ad      	b.n	8005848 <__sflush_r+0x1c>
 80058ec:	690f      	ldr	r7, [r1, #16]
 80058ee:	2f00      	cmp	r7, #0
 80058f0:	d0a9      	beq.n	8005846 <__sflush_r+0x1a>
 80058f2:	0793      	lsls	r3, r2, #30
 80058f4:	680e      	ldr	r6, [r1, #0]
 80058f6:	bf08      	it	eq
 80058f8:	694b      	ldreq	r3, [r1, #20]
 80058fa:	600f      	str	r7, [r1, #0]
 80058fc:	bf18      	it	ne
 80058fe:	2300      	movne	r3, #0
 8005900:	eba6 0807 	sub.w	r8, r6, r7
 8005904:	608b      	str	r3, [r1, #8]
 8005906:	f1b8 0f00 	cmp.w	r8, #0
 800590a:	dd9c      	ble.n	8005846 <__sflush_r+0x1a>
 800590c:	6a21      	ldr	r1, [r4, #32]
 800590e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005910:	4643      	mov	r3, r8
 8005912:	463a      	mov	r2, r7
 8005914:	4628      	mov	r0, r5
 8005916:	47b0      	blx	r6
 8005918:	2800      	cmp	r0, #0
 800591a:	dc06      	bgt.n	800592a <__sflush_r+0xfe>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005922:	81a3      	strh	r3, [r4, #12]
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	e78e      	b.n	8005848 <__sflush_r+0x1c>
 800592a:	4407      	add	r7, r0
 800592c:	eba8 0800 	sub.w	r8, r8, r0
 8005930:	e7e9      	b.n	8005906 <__sflush_r+0xda>
 8005932:	bf00      	nop
 8005934:	dfbffffe 	.word	0xdfbffffe

08005938 <_fflush_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	690b      	ldr	r3, [r1, #16]
 800593c:	4605      	mov	r5, r0
 800593e:	460c      	mov	r4, r1
 8005940:	b913      	cbnz	r3, 8005948 <_fflush_r+0x10>
 8005942:	2500      	movs	r5, #0
 8005944:	4628      	mov	r0, r5
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	b118      	cbz	r0, 8005952 <_fflush_r+0x1a>
 800594a:	6a03      	ldr	r3, [r0, #32]
 800594c:	b90b      	cbnz	r3, 8005952 <_fflush_r+0x1a>
 800594e:	f7ff f99b 	bl	8004c88 <__sinit>
 8005952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f3      	beq.n	8005942 <_fflush_r+0xa>
 800595a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800595c:	07d0      	lsls	r0, r2, #31
 800595e:	d404      	bmi.n	800596a <_fflush_r+0x32>
 8005960:	0599      	lsls	r1, r3, #22
 8005962:	d402      	bmi.n	800596a <_fflush_r+0x32>
 8005964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005966:	f7ff fb84 	bl	8005072 <__retarget_lock_acquire_recursive>
 800596a:	4628      	mov	r0, r5
 800596c:	4621      	mov	r1, r4
 800596e:	f7ff ff5d 	bl	800582c <__sflush_r>
 8005972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005974:	07da      	lsls	r2, r3, #31
 8005976:	4605      	mov	r5, r0
 8005978:	d4e4      	bmi.n	8005944 <_fflush_r+0xc>
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	059b      	lsls	r3, r3, #22
 800597e:	d4e1      	bmi.n	8005944 <_fflush_r+0xc>
 8005980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005982:	f7ff fb77 	bl	8005074 <__retarget_lock_release_recursive>
 8005986:	e7dd      	b.n	8005944 <_fflush_r+0xc>

08005988 <__swhatbuf_r>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	460c      	mov	r4, r1
 800598c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005990:	2900      	cmp	r1, #0
 8005992:	b096      	sub	sp, #88	; 0x58
 8005994:	4615      	mov	r5, r2
 8005996:	461e      	mov	r6, r3
 8005998:	da0d      	bge.n	80059b6 <__swhatbuf_r+0x2e>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80059a0:	f04f 0100 	mov.w	r1, #0
 80059a4:	bf0c      	ite	eq
 80059a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80059aa:	2340      	movne	r3, #64	; 0x40
 80059ac:	2000      	movs	r0, #0
 80059ae:	6031      	str	r1, [r6, #0]
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	b016      	add	sp, #88	; 0x58
 80059b4:	bd70      	pop	{r4, r5, r6, pc}
 80059b6:	466a      	mov	r2, sp
 80059b8:	f000 f848 	bl	8005a4c <_fstat_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	dbec      	blt.n	800599a <__swhatbuf_r+0x12>
 80059c0:	9901      	ldr	r1, [sp, #4]
 80059c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80059c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80059ca:	4259      	negs	r1, r3
 80059cc:	4159      	adcs	r1, r3
 80059ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059d2:	e7eb      	b.n	80059ac <__swhatbuf_r+0x24>

080059d4 <__smakebuf_r>:
 80059d4:	898b      	ldrh	r3, [r1, #12]
 80059d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059d8:	079d      	lsls	r5, r3, #30
 80059da:	4606      	mov	r6, r0
 80059dc:	460c      	mov	r4, r1
 80059de:	d507      	bpl.n	80059f0 <__smakebuf_r+0x1c>
 80059e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	2301      	movs	r3, #1
 80059ea:	6163      	str	r3, [r4, #20]
 80059ec:	b002      	add	sp, #8
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	ab01      	add	r3, sp, #4
 80059f2:	466a      	mov	r2, sp
 80059f4:	f7ff ffc8 	bl	8005988 <__swhatbuf_r>
 80059f8:	9900      	ldr	r1, [sp, #0]
 80059fa:	4605      	mov	r5, r0
 80059fc:	4630      	mov	r0, r6
 80059fe:	f7ff fbb5 	bl	800516c <_malloc_r>
 8005a02:	b948      	cbnz	r0, 8005a18 <__smakebuf_r+0x44>
 8005a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a08:	059a      	lsls	r2, r3, #22
 8005a0a:	d4ef      	bmi.n	80059ec <__smakebuf_r+0x18>
 8005a0c:	f023 0303 	bic.w	r3, r3, #3
 8005a10:	f043 0302 	orr.w	r3, r3, #2
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	e7e3      	b.n	80059e0 <__smakebuf_r+0xc>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	6020      	str	r0, [r4, #0]
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a20:	81a3      	strh	r3, [r4, #12]
 8005a22:	9b00      	ldr	r3, [sp, #0]
 8005a24:	6163      	str	r3, [r4, #20]
 8005a26:	9b01      	ldr	r3, [sp, #4]
 8005a28:	6120      	str	r0, [r4, #16]
 8005a2a:	b15b      	cbz	r3, 8005a44 <__smakebuf_r+0x70>
 8005a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a30:	4630      	mov	r0, r6
 8005a32:	f000 f81d 	bl	8005a70 <_isatty_r>
 8005a36:	b128      	cbz	r0, 8005a44 <__smakebuf_r+0x70>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f023 0303 	bic.w	r3, r3, #3
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	431d      	orrs	r5, r3
 8005a48:	81a5      	strh	r5, [r4, #12]
 8005a4a:	e7cf      	b.n	80059ec <__smakebuf_r+0x18>

08005a4c <_fstat_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	4d07      	ldr	r5, [pc, #28]	; (8005a6c <_fstat_r+0x20>)
 8005a50:	2300      	movs	r3, #0
 8005a52:	4604      	mov	r4, r0
 8005a54:	4608      	mov	r0, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	602b      	str	r3, [r5, #0]
 8005a5a:	f7fb f978 	bl	8000d4e <_fstat>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	d102      	bne.n	8005a68 <_fstat_r+0x1c>
 8005a62:	682b      	ldr	r3, [r5, #0]
 8005a64:	b103      	cbz	r3, 8005a68 <_fstat_r+0x1c>
 8005a66:	6023      	str	r3, [r4, #0]
 8005a68:	bd38      	pop	{r3, r4, r5, pc}
 8005a6a:	bf00      	nop
 8005a6c:	200005e4 	.word	0x200005e4

08005a70 <_isatty_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d06      	ldr	r5, [pc, #24]	; (8005a8c <_isatty_r+0x1c>)
 8005a74:	2300      	movs	r3, #0
 8005a76:	4604      	mov	r4, r0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	602b      	str	r3, [r5, #0]
 8005a7c:	f7fb f977 	bl	8000d6e <_isatty>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_isatty_r+0x1a>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_isatty_r+0x1a>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	200005e4 	.word	0x200005e4

08005a90 <_sbrk_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	4d06      	ldr	r5, [pc, #24]	; (8005aac <_sbrk_r+0x1c>)
 8005a94:	2300      	movs	r3, #0
 8005a96:	4604      	mov	r4, r0
 8005a98:	4608      	mov	r0, r1
 8005a9a:	602b      	str	r3, [r5, #0]
 8005a9c:	f7fb f980 	bl	8000da0 <_sbrk>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d102      	bne.n	8005aaa <_sbrk_r+0x1a>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	b103      	cbz	r3, 8005aaa <_sbrk_r+0x1a>
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	200005e4 	.word	0x200005e4

08005ab0 <_init>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr

08005abc <_fini>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	bf00      	nop
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr
